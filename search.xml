<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xampp-mysql</title>
      <link href="/2019/09/06/xampp-mysql/"/>
      <url>/2019/09/06/xampp-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="xampp-下-mysql-初始密码的修改"><a href="#xampp-下-mysql-初始密码的修改" class="headerlink" title="xampp 下 mysql 初始密码的修改"></a>xampp 下 mysql 初始密码的修改</h2><p>首先，我们点击 xampp 中的 shell 按钮，登陆 <code>mysql：c:&gt;mysql -u root -p</code> ，然后密码直接回车。</p><p>现在，应该进入 mysql 了，输入下面这条指令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;set password for 'root'@'localhost'=password('newpasswd');</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出 React Hooks</title>
      <link href="/2019/06/04/react-hook/"/>
      <url>/2019/06/04/react-hook/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/png/103147/1557142220425-364dee55-ce15-4c83-98d1-8e1ec9ada26e.png#align=left&amp;display=inline&amp;height=540&amp;name=image.png&amp;originHeight=1080&amp;originWidth=1920&amp;size=141753&amp;status=done&amp;width=960" alt="image.png"></p><blockquote><p>直播回放链接：<a href="https://yq.aliyun.com/articles/700174" target="_blank" rel="noopener">云栖社区</a> (<a href="https://github.com/x-cold" target="_blank" rel="noopener">@x-cold</a>)</p></blockquote><p><a name="4wRfh"></a></p><h2 id="React-Hooks-是什么？"><a href="#React-Hooks-是什么？" class="headerlink" title="React Hooks 是什么？"></a>React Hooks 是什么？</h2><p>Hooks 顾名思义，字面意义上来说就是 React 钩子的概念。通过一个 case 我们对 React Hooks 先有一个第一印象。</p><p>假设现在要实现一个计数器的组件。如果使用组件化的方式，我们需要做的事情相对更多一些，比如说声明 state，编写计数器的方法等，而且需要理解的概念可能更多一些，比如 Javascript 的类的概念，this 上下文的指向等。</p><p><a href="https://codepen.io/x-cold/pen/JqjZKR" target="_blank" rel="noopener">示例</a><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  countUp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: count + <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  countDown = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: count - <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.countUp&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;h1&gt;&#123;count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.countDown&#125;&gt;-&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Counter /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure></p><p>使用 React Hooks，我们可以这么写。</p><a id="more"></a><p><a href="https://codepen.io/x-cold/pen/ZNEReY" target="_blank" rel="noopener">示例</a><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + <span class="number">1</span>)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count - 1)&#125;&gt;-&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Counter /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure></p><p>通过上面的例子，显而易见的是 React Hooks 提供了一种简洁的、函数式（FP）的程序风格，通过纯函数组件和可控的数据流来实现状态到 UI 的交互（MVVM）。</p><p><a name="fO6PX"></a></p><h3 id="Hooks-API"><a href="#Hooks-API" class="headerlink" title="Hooks API"></a>Hooks API</h3><ul><li><a href="https://reactjs.org/docs/hooks-reference.html#basic-hooks" target="_blank" rel="noopener">Basic Hooks</a><ul><li><a href="https://reactjs.org/docs/hooks-reference.html#usestate" target="_blank" rel="noopener"><code>useState</code></a></li><li><a href="https://reactjs.org/docs/hooks-reference.html#useeffect" target="_blank" rel="noopener"><code>useEffect</code></a></li><li><a href="https://reactjs.org/docs/hooks-reference.html#usecontext" target="_blank" rel="noopener"><code>useContext</code></a></li></ul></li><li><a href="https://reactjs.org/docs/hooks-reference.html#additional-hooks" target="_blank" rel="noopener">Additional Hooks</a><ul><li><a href="https://reactjs.org/docs/hooks-reference.html#usereducer" target="_blank" rel="noopener"><code>useReducer</code></a></li><li><a href="https://reactjs.org/docs/hooks-reference.html#usecallback" target="_blank" rel="noopener"><code>useCallback</code></a></li><li><a href="https://reactjs.org/docs/hooks-reference.html#usememo" target="_blank" rel="noopener"><code>useMemo</code></a></li><li><a href="https://reactjs.org/docs/hooks-reference.html#useref" target="_blank" rel="noopener"><code>useRef</code></a></li><li><a href="https://reactjs.org/docs/hooks-reference.html#useimperativehandle" target="_blank" rel="noopener"><code>useImperativeHandle</code></a></li><li><a href="https://reactjs.org/docs/hooks-reference.html#uselayouteffect" target="_blank" rel="noopener"><code>useLayoutEffect</code></a></li><li><a href="https://reactjs.org/docs/hooks-reference.html#usedebugvalue" target="_blank" rel="noopener"><code>useDebugValue</code></a></li></ul></li></ul><p><a name="1pCkl"></a></p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>useState 是最基本的 API，它传入一个初始值，每次函数执行都能拿到新值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + <span class="number">1</span>)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count - 1)&#125;&gt;-&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Counter /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p>需要注意的是，通过 useState 得到的状态 count，在 Counter 组件中的表现为一个常量，每一次通过 setCount 进行修改后，又重新通过 useState 获取到一个新的常量。</p><p><a name="Bfdkr"></a></p><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><p>useReducer 和 useState 几乎是一样的，需要外置外置 reducer (全局)，通过这种方式可以对多个状态同时进行控制。仔细端详起来，其实跟 redux 中的数据流的概念非常接近。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useReducer &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'up'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'down'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;state.count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class="attr">type</span>: <span class="string">'up'</span> &#125;)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class="attr">type</span>: <span class="string">'down'</span> &#125;)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Counter /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p><a name="o2hie"></a></p><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>一个至关重要的 Hooks API，顾名思义，useEffect 是用于处理各种状态变化造成的副作用，也就是说只有在特定的时刻，才会执行的逻辑。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// =&gt; componentDidMount/componentDidUpdate</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// update </span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">    <span class="comment">// =&gt; componentWillUnMount</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">'app'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Example /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p><a name="fg4Y5"></a></p><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>useMemo 主要用于渲染过程优化，两个参数依次是计算函数（通常是组件函数）和依赖状态列表，当依赖的状态发生改变时，才会触发计算函数的执行。如果没有指定依赖，则每一次渲染过程都会执行该计算函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> computeExpensiveValue(a, b), [a, b]);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useMemo &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Time</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;Date.now()&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> memoizedChildComponent = useMemo(<span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Time</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;, [count]);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  return (</span></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;div&gt;&#123;memoizedChildComponent&#125;&lt;/div&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  );</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">ReactDOM.render(<span class="tag">&lt;<span class="name">Counter</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><p><a name="Qenmu"></a></p><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><p>context 是在外部 create ，内部 use 的 state，它和全局变量的区别在于，如果多个组件同时 useContext，那么这些组件都会 rerender，如果多个组件同时 useState 同一个全局变量，则只有触发 setState 的当前组件 rerender。</p><p><a href="https://codepen.io/x-cold/pen/OYJGKQ" target="_blank" rel="noopener">示例-未使用 useContext</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useContext, createContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 使用 createContext 创建上下文</span></span><br><span class="line"><span class="keyword">const</span> UserContext = <span class="keyword">new</span> createContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建 Provider</span></span><br><span class="line"><span class="keyword">const</span> UserProvider = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [username, handleChangeUsername] = useState(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;UserContext.Provider value=&#123;&#123; username, handleChangeUsername &#125;&#125;&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;<span class="regexp">/UserContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 3. 创建 Consumer</span></span><br><span class="line"><span class="regexp">const UserConsumer = UserContext.Consumer;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 4. 使用 Consumer 包裹组件</span></span><br><span class="line"><span class="regexp">const Pannel = () =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;UserConsumer&gt;</span></span><br><span class="line"><span class="regexp">    &#123;(&#123; username, handleChangeUsername &#125;) =&gt; (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;user: &#123;username&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;input onChange=&#123;e =&gt; handleChangeUsername(e.target.value)&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>UserConsumer&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Form = <span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Pannel</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const App = () =&gt; (</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;UserProvider&gt;</span><br><span class="line">      &lt;Form /&gt;</span><br><span class="line">    &lt;/UserProvider&gt;</span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">ReactDOM.render(<span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><p><a href="https://codepen.io/x-cold/pen/GaRLqZ?editors=0010" target="_blank" rel="noopener">示例 - 使用 useContext</a><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useContext, createContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 使用 createContext 创建上下文</span></span><br><span class="line"><span class="keyword">const</span> UserContext = <span class="keyword">new</span> createContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建 Provider</span></span><br><span class="line"><span class="keyword">const</span> UserProvider = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [username, handleChangeUsername] = useState(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;UserContext.Provider value=&#123;&#123; username, handleChangeUsername &#125;&#125;&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;<span class="regexp">/UserContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Pannel = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const &#123; username, handleChangeUsername &#125; = useContext(UserContext); /</span><span class="regexp">/ 3. 使用 Context</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;user: &#123;username&#125;&lt;/</span>div&gt;</span><br><span class="line">      &lt;input onChange=&#123;e =&gt; handleChangeUsername(e.target.value)&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Form = () =&gt; &lt;Pannel /</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;UserProvider&gt;</span><br><span class="line">      &lt;Form /&gt;</span><br><span class="line">    &lt;<span class="regexp">/UserProvider&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure></p><p><a name="xAPs1"></a></p><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><p>useRef 返回一个可变的 ref 对象，其 .current 属性初始化为传递的参数（initialValue）。返回的对象将持续整个组件的生命周期。事实上 useRef 是一个非常有用的 API，许多情况下，我们需要保存一些改变的东西，它会派上大用场的。</p><p><a href="https://codepen.io/x-cold/pen/EzxMPw" target="_blank" rel="noopener">示例</a><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextInputWithFocusButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> onButtonClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// `current` points to the mounted text input element</span></span><br><span class="line">    inputEl.current.focus();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;input ref=&#123;inputEl&#125; type=<span class="string">"text"</span> /&gt;</span><br><span class="line">      &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a name="ReVY6"></a></p><h2 id="React-状态共享方案"><a href="#React-状态共享方案" class="headerlink" title="React 状态共享方案"></a>React 状态共享方案</h2><p>说到状态共享，最简单和直接的方式就是通过 props 逐级进行状态的传递，这种方式耦合于组件的父子关系，一旦组件嵌套结构发生变化，就需要重新编写代码，维护成本非常昂贵。随着时间的推移，官方推出了各种方案来解决状态共享和代码复用的问题。</p><p><a name="9oPRo"></a></p><h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103147/1557132050699-0f447719-f393-477a-9aa3-8d792ca5cd5f.png#align=left&amp;display=inline&amp;height=330&amp;name=image.png&amp;originHeight=660&amp;originWidth=1226&amp;size=164408&amp;status=done&amp;width=613" alt="image.png"><br>React 中，只有通过 createClass 创建的组件才能使用 mixins。这种高耦合，依赖难以控制，复杂度高的方式随着 ES6 的浪潮逐渐淡出了历史舞台。</p><p><a name="h8DyH"></a></p><h3 id="HOC"><a href="#HOC" class="headerlink" title="HOC"></a>HOC</h3><p>高阶组件源于函数式编程，由于 React 中的组件也可以视为函数（类），因此天生就可以通过 HOC 的方式来实现代码复用。可以通过属性代理和反向继承来实现，HOC 可以很方便的操控渲染的结果，也可以对组件的 props / state 进行操作，从而可以很方便的进行复杂的代码逻辑复用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性代理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    children: PropTypes.element,</span><br><span class="line">    visible: PropTypes.bool,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; visible, children &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> visible ? children : <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Show2</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.visible === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.render();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;Show visible=&#123;<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>&#125;&gt;hello&lt;<span class="regexp">/Show&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>Redux 中的状态复用是一种典型的 HOC 的实现，我们可以通过 compose 来将数据组装到目标组件中，当然你也可以通过装饰器的方式进行处理。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use decorator</span></span><br><span class="line">@connect(<span class="function"><span class="params">state</span> =&gt;</span> (&#123; <span class="attr">name</span>: state.user.name &#125;))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use compose</span></span><br><span class="line">connect(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">name</span>: state.user.name &#125;))(App);</span><br></pre></td></tr></table></figure><p><a name="ejRZ3"></a></p><h3 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h3><p>显而易见，renderProps 就是一种将 render 方法作为 props 传递到子组件的方案，相比 HOC 的方案，renderProps 可以保护原有的组件层次结构。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与 HOC 不同，我们可以使用具有 render prop 的普通组件来共享代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    render: PropTypes.func.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  state = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">  handleMouseMove = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      x: event.clientX,</span><br><span class="line">      y: event.clientY</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">height</span>: <span class="string">'100%'</span> &#125;&#125; onMouseMove=&#123;<span class="keyword">this</span>.handleMouseMove&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.render(<span class="keyword">this</span>.state)&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div style=&#123;&#123; height: '100%' &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Mouse render=&#123;(&#123; x, y &#125;) =&gt; (</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ render prop 给了我们所需要的 state 来渲染我们想要的</span></span><br><span class="line"><span class="regexp">          &lt;h1&gt;The mouse position is (&#123;x&#125;, &#123;y&#125;)&lt;/</span>h1&gt;</span><br><span class="line">        )&#125;/&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;App/</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p><a name="4oynP"></a></p><h3 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h3><p>通过组合 Hooks API 和 React 内置的 Context，从前面的示例可以看到通过 Hook 让组件之间的状态共享更清晰和简单。</p><p><a name="bXgHy"></a></p><h2 id="React-Hooks-设计理念"><a href="#React-Hooks-设计理念" class="headerlink" title="React Hooks 设计理念"></a>React Hooks 设计理念</h2><p><a name="OYTXg"></a></p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103147/1557141237856-51f92576-f6f5-4dc3-a38f-9ef3fc841590.png#align=left&amp;display=inline&amp;height=376&amp;name=image.png&amp;originHeight=424&amp;originWidth=684&amp;size=88574&amp;status=done&amp;width=607" alt="image.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FunctionalComponent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state1, setState1] = useState(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> [state2, setState2] = useState(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> [state3, setState3] = useState(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103147/1557141338783-bb968286-9762-4a3a-8bc0-4d52b717ae6b.png#align=left&amp;display=inline&amp;height=509&amp;name=image.png&amp;originHeight=491&amp;originWidth=591&amp;size=40551&amp;status=done&amp;width=613" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  memoizedState: <span class="string">'foo'</span>,</span><br><span class="line">  next: &#123;</span><br><span class="line">    memoizedState: <span class="string">'bar'</span>,</span><br><span class="line">    next: &#123;</span><br><span class="line">      memoizedState: <span class="string">'bar'</span>,</span><br><span class="line">      next: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="nIZhk"></a></p><h3 id="函数式贯彻到底"><a href="#函数式贯彻到底" class="headerlink" title="函数式贯彻到底"></a>函数式贯彻到底</h3><p><a name="ShOaE"></a></p><h4 id="capture-props"><a href="#capture-props" class="headerlink" title="capture props"></a>capture props</h4><p>函数组件天生就是支持 props 的，基本用法上和 class 组件没有太大的差别。需要注意的两个区别是：</p><ul><li>class 组件 props 挂载在 this 上下文中，而函数式组件通过形参传入；</li><li>由于挂载位置的差异，class 组件中如果 this 发生了变化，那么 this.props 也会随之改变；而在函数组件里 props 始终是不可变的，因此遵守 capture value 原则（即获取的值始终是某一时刻的），Hooks 也遵循这个原则。</li></ul><p>通过一个<a href="https://codesandbox.io/s/pjqnl16lm7" target="_blank" rel="noopener">示例</a>来理解一下 capture value，我们可以通过 useRef 来规避 capture value，因为 useRef 是可变的。</p><p><a name="c4wq2"></a></p><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><table><thead><tr><th></th><th>class 组件</th><th>函数组件</th></tr></thead><tbody><tr><td>创建状态</td><td>this.state = {}</td><td>useState, useReducer</td></tr><tr><td>修改状态</td><td>this.setState()</td><td>set function</td></tr><tr><td>更新机制</td><td>异步更新，多次修改合并到上一个状态，产生一个副本</td><td>同步更新，直接修改为目标状态</td></tr><tr><td>状态管理</td><td>一个 state 集中式管理多个状态</td><td>多个 state，可以通过 useReducer 进行状态合并（手动）</td></tr><tr><td>性能</td><td>高</td><td>如果 useState 初始化状态需要通过非常复杂的计算得到，请使用函数的声明方式，否则每次渲染都会重复执行</td></tr><tr><td></td><td></td></tr></tbody></table><p><a name="Ygpro"></a></p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li>componentDidMount / componentDidUpdate / componentWillUnMount</li></ul><p>useEffect 在每一次渲染都会被调用，稍微包装一下就可以作为这些生命周期使用；</p><ul><li>shouldComponentUpdate</li></ul><p>通常我们优化组件性能时，会优先采用纯组件的方式来减少单个组件的渲染次数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>React Hooks 中可以采用 useMemo 代替，可以实现仅在某些数据变化时重新渲染组件，等同于自带了 shallowEqual 的 shouldComponentUpdate。<br><a name="HVJ3I"></a></p><h4 id="强制渲染-forceUpdate"><a href="#强制渲染-forceUpdate" class="headerlink" title="强制渲染 forceUpdate"></a>强制渲染 forceUpdate</h4><p>由于默认情况下，每一次修改状态都会造成重新渲染，可以通过一个不使用的 set 函数来当成 forceUpdate。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> forceUpdate = <span class="function"><span class="params">()</span> =&gt;</span> useState(<span class="number">0</span>)[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p><a name="zUNJm"></a></p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p><a name="lKXz6"></a></p><h2 id="基于-Hooks，增强-Hooks"><a href="#基于-Hooks，增强-Hooks" class="headerlink" title="基于 Hooks，增强 Hooks"></a>基于 Hooks，增强 Hooks</h2><p><a name="I00nT"></a></p><h3 id="来一套组合拳吧！"><a href="#来一套组合拳吧！" class="headerlink" title="来一套组合拳吧！"></a>来一套组合拳吧！</h3><p>由于每一个 Hooks API 都是纯函数的概念，使用时更关注输入 (input) 和输出 (output)，因此可以更好的通过组装函数的方式，对不同特性的基础 Hooks API 进行组合，创造拥有新特性的 Hooks。</p><ul><li>useState 维护组件状态</li><li>useEffect 处理副作用</li><li>useContext 监听 provider 更新变化</li></ul><p><a name="smNOw"></a></p><h3 id="useDidMount"><a href="#useDidMount" class="headerlink" title="useDidMount"></a>useDidMount</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useDidMount = <span class="function"><span class="params">fn</span> =&gt;</span> useEffect(<span class="function"><span class="params">()</span> =&gt;</span> fn &amp;&amp; fn(), []);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useDidMount;</span><br></pre></td></tr></table></figure><p><a name="GwwRF"></a></p><p>###<br><a name="4PTjD"></a></p><h3 id="useDidUpdate"><a href="#useDidUpdate" class="headerlink" title="useDidUpdate"></a>useDidUpdate</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useDidUpdate = <span class="function">(<span class="params">fn, conditions</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> didMoutRef = useRef(<span class="literal">false</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!didMoutRef.current) &#123;</span><br><span class="line">      didMoutRef.current = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Cleanup effects when fn returns a function</span></span><br><span class="line">    <span class="keyword">return</span> fn &amp;&amp; fn();</span><br><span class="line">  &#125;, conditions);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useDidUpdate</span><br></pre></td></tr></table></figure><p><a name="LjeaI"></a></p><h3 id="useWillUnmount"><a href="#useWillUnmount" class="headerlink" title="useWillUnmount"></a>useWillUnmount</h3><p>在讲到 useEffect 时已经提及过，其允许返回一个 cleanup 函数，组件在取消挂载时将会执行该 cleanup 函数，因此 useWillUnmount 也能轻松实现~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useWillUnmount = <span class="function"><span class="params">fn</span> =&gt;</span> useEffect(<span class="function"><span class="params">()</span> =&gt;</span> <span class="function"><span class="params">()</span> =&gt;</span> fn &amp;&amp; fn(), []);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useWillUnmount;</span><br></pre></td></tr></table></figure><p><a name="YcQCg"></a></p><h3 id="useHover"><a href="#useHover" class="headerlink" title="useHover"></a>useHover</h3><p><a href="https://codepen.io/x-cold/pen/joOXxK" target="_blank" rel="noopener">示例</a><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/onHover.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useHover = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [hovered, <span class="keyword">set</span>] = useState(false);</span><br><span class="line">  return &#123;</span><br><span class="line">    hovered,</span><br><span class="line">    bind: &#123;</span><br><span class="line">      onMouseEnter: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">set</span>(true),</span><br><span class="line">      onMouseLeave: () =&gt; <span class="keyword">set</span>(false),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default useHover;</span><br></pre></td></tr></table></figure></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useHover &#125; <span class="keyword">from</span> <span class="string">'./lib/onHover.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hover</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; hovered, bind &#125; = useHover();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div &#123;...bind&#125;&gt;</span><br><span class="line">        hovered:</span><br><span class="line">        &#123;<span class="built_in">String</span>(hovered)&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="eObx9"></a></p><h3 id="useField"><a href="#useField" class="headerlink" title="useField"></a>useField</h3><p><a href="https://codepen.io/x-cold/pen/rgNPNB" target="_blank" rel="noopener">示例</a><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/useField.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useField = <span class="function">(<span class="params">initial</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, <span class="keyword">set</span>] = useState(initial);</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    value,</span><br><span class="line">    <span class="keyword">set</span>,</span><br><span class="line">    reset: () =&gt; <span class="keyword">set</span>(initial),</span><br><span class="line">    bind: &#123;</span><br><span class="line">      value,</span><br><span class="line">      onChange: <span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">set</span>(e.target.value),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default useField;</span><br></pre></td></tr></table></figure></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useField &#125; <span class="keyword">from</span> <span class="string">'lib/useField'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Input</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value, bind &#125; = useField(<span class="string">'Type Here...'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      input text:</span><br><span class="line">      &#123;value&#125;</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> &#123;...bind&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Select() &#123;</span></span><br><span class="line"><span class="regexp">  const &#123; value, bind &#125; = useField('apple')</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      selected:</span></span><br><span class="line"><span class="regexp">      &#123;value&#125;</span></span><br><span class="line"><span class="regexp">      &lt;select &#123;...bind&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;option value="apple"&gt;apple&lt;/</span>option&gt;</span><br><span class="line">        &lt;option value=<span class="string">"orange"</span>&gt;orange&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>select&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><a name="h2fgP"></a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>Hook 的使用范围：函数式的 React 组件中、自定义的 Hook 函数里；</li><li>Hook 必须写在函数的最外层，每一次 useState 都会改变其下标 (cursor)，React 根据其顺序来更新状态；</li><li>尽管每一次渲染都会执行 Hook API，但是产生的状态 (state) 始终是一个常量（作用域在函数内部）；</li></ul><p><a name="wBXEs"></a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>React Hooks 提供为状态管理提供了新的可能性，尽管我们可能需要额外去维护一些内部的状态，但是可以避免通过 renderProps / HOC 等复杂的方式来处理状态管理的问题。Hooks 带来的好处如下：</p><ul><li>更细粒度的代码复用，并且不会产生过多的副作用</li><li>函数式编程风格，代码更简洁，同时降低了使用和理解门槛</li><li>减少组件嵌套层数</li><li>组件数据流向更清晰</li></ul><p>事实上，通过定制各种场景下的自定义 Hooks，能让我们的应用程序更方便和简洁，组件的层次结构也能保证完好，还有如此令人愉悦的函数式编程风格，Hooks 在 React 16.8.0 版本已经正式发布稳定版本，现在开始用起来吧！！！</p><p><a name="wN7im"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://reactjs.org/docs/hooks-reference.html" target="_blank" rel="noopener">hooks-reference</a></li><li><a href="https://github.com/beizhedenglong/react-hooks-lib" target="_blank" rel="noopener">react-hooks-lib</a></li><li><a href="https://juejin.im/post/5cad39b3f265da03502b1c0a" target="_blank" rel="noopener">【React深入】从Mixin到HOC再到Hook</a></li><li><a href="https://overreacted.io/how-are-function-components-different-from-classes/" target="_blank" rel="noopener">How Are Function Components Different from Classes?</a></li><li><a href="https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba" target="_blank" rel="noopener">under-the-hood-of-reacts-hooks-system</a></li><li><a href="https://juejin.im/post/5bdfc1c4e51d4539f4178e1f" target="_blank" rel="noopener">阅读源码后，来讲讲React Hooks是怎么实现的</a></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103147/1557142193165-0bfa8139-4b3f-40b3-9401-530eb6715a5c.png#align=left&amp;display=inline&amp;height=540&amp;name=image.png&amp;originHeight=1080&amp;originWidth=1920&amp;size=636918&amp;status=done&amp;width=960" alt="image.png"></p><p>转载至 <a href="https://www.yuque.com/yinzhi/blog/sm7slk?spm=a2c4e.11153940.blogcont700174.10.64934ef1O1lVac" target="_blank" rel="noopener">深入浅出 React Hooks</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript学习(7) 高级类型</title>
      <link href="/2019/05/18/learn-ts7/"/>
      <url>/2019/05/18/learn-ts7/</url>
      
        <content type="html"><![CDATA[<h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><p>将多个类型合并为一个类型，<code>Man &amp; Student</code> 说明这个类型同时拥有 <code>Man</code> 和 <code>Student</code> 类型的成员</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Man = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> Student = &#123;</span><br><span class="line">  grade: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> Jack = Man &amp; Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jack: Jack = &#123;</span><br><span class="line">  name: <span class="string">'jack'</span>,</span><br><span class="line">  grade: <span class="number">5</span> <span class="comment">// 如果缺少其中一个成员会报错</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有时候交叉类型不能交叉一些基本类型，如 <code>string &amp; boolean</code> 一个值不可能既是 <code>string</code> 也是 <code>boolean</code>，会被推断成 never 或只能赋值为 <code>undefined</code> 或 <code>null</code></p><a id="more"></a><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>当一个值可能是多种不同类型时，使用联合类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> strOrNum = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str: strOrNum = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">let</span> num: strOrNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> bool: strOrNum = <span class="literal">true</span>; <span class="comment">// error: Type 'true' is not assignable to type 'strOrNum'</span></span><br></pre></td></tr></table></figure><p>当联合类型是函数返回值且成员是对象时，是求交集</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">  fly();</span><br><span class="line">  layEggs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Fish &#123;</span><br><span class="line">  swim();</span><br><span class="line">  layEggs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSmallPet</span>(<span class="params"></span>): <span class="title">Fish</span> | <span class="title">Bird</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pet = getSmallPet();</span><br><span class="line">pet.layEggs(); <span class="comment">// okay</span></span><br><span class="line">pet.swim(); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h2 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h2><p>联合类型适合于那些值可以为不同类型的情况。 但当我们想确切地了解是否为 <code>Fish</code> 或者是 <code>Bird</code> 时怎么办？ JavaScript 里常用来区分这 2 个可能值的方法是检查成员是否存在。如之前提及的，我们只能访问联合类型中共同拥有的成员。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pet = getSmallPet();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每一个成员访问都会报错</span></span><br><span class="line"><span class="keyword">if</span> (pet.swim) &#123;</span><br><span class="line">  pet.swim();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pet.fly) &#123;</span><br><span class="line">  pet.fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让这段代码工作，我们要使用类型断言：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pet = getSmallPet();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((pet <span class="keyword">as</span> Fish).swim) &#123;</span><br><span class="line">  (pet <span class="keyword">as</span> Fish).swim();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  (pet <span class="keyword">as</span> Bird).fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户自定义的类型保护"><a href="#用户自定义的类型保护" class="headerlink" title="用户自定义的类型保护"></a>用户自定义的类型保护</h3><p>这里可以注意到我们不得不多次使用类型断言。如果我们一旦检查过类型，就能在之后的每个分支里清楚地知道 <code>pet</code> 的类型的话就好了。</p><p>TypeScript 里的<em>类型保护</em>机制让它成为了现实。 类型保护就是一些表达式，它们会在运行时检查以确保在某个作用域里的类型。定义一个类型保护，我们只要简单地定义一个函数，它的返回值是一个<em>类型谓词</em>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFish</span>(<span class="params">pet: Fish | Bird</span>): <span class="title">pet</span> <span class="title">is</span> <span class="title">Fish</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (pet <span class="keyword">as</span> Fish).swim !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子里，<code>pet is Fish</code> 就是类型谓词。谓词为 <code>parameterName is Type</code> 这种形式， <code>parameterName</code> 必须是来自于当前函数签名里的一个参数名。</p><p>每当使用一些变量调用 <code>isFish</code> 时，<code>TypeScript</code> 会将变量缩减为那个具体的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isFish(pet)) &#123;</span><br><span class="line">  pet.swim();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  pet.fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <code>TypeScript</code> 不仅知道在 <code>if</code> 分支里 <code>pet</code> 是 <code>Fish</code> 类型；它还清楚在 <code>else</code> 分支里，一定不是 Fish 类型而是 <code>Bird</code> 类型。</p><h3 id="typeof-类型保护"><a href="#typeof-类型保护" class="headerlink" title="typeof 类型保护"></a>typeof 类型保护</h3><p>现在我们回过头来看看怎么使用联合类型书写 <code>padLeft</code> 代码。我们可以像下面这样利用类型断言来写：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">x: <span class="built_in">any</span></span>): <span class="title">x</span> <span class="title">is</span> <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'number'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">x: <span class="built_in">any</span></span>): <span class="title">x</span> <span class="title">is</span> <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'string'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isNumber(padding)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">' '</span>) + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isString(padding)) &#123;</span><br><span class="line">    <span class="keyword">return</span> padding + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Expected string or number, got '<span class="subst">$&#123;padding&#125;</span>'.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，你必须要定义一个函数来判断类型是否是原始类型，但这并不必要。其实我们不必将 <code>typeof x === &#39;number&#39;</code>抽象成一个函数，因为 TypeScript 可以将它识别为一个类型保护。 也就是说我们可以直接在代码里检查类型了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">' '</span>) + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> padding + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Expected string or number, got '<span class="subst">$&#123;padding&#125;</span>'.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些 <code>typeof</code> 类型保护只有两种形式能被识别：<code>typeof v === &quot;typename&quot;</code> 和 <code>typeof v !== &quot;typename&quot;</code>， <code>&quot;typename&quot;</code>必须是 <code>&quot;number&quot;</code>， <code>&quot;string&quot;</code>，<code>&quot;boolean&quot;</code> 或 <code>&quot;symbol&quot;</code>。 但是 TypeScript 并不会阻止你与其它字符串比较，只是 TypeScript 不会把那些表达式识别为类型保护。</p><h3 id="instanceof-类型保护"><a href="#instanceof-类型保护" class="headerlink" title="instanceof 类型保护"></a>instanceof 类型保护</h3><p>如果你已经阅读了 <code>typeof</code> 类型保护并且对 JavaScript 里的 <code>instanceof</code> 操作符熟悉的话，你可能已经猜到了这节要讲的内容。</p><p><code>instanceof</code> 类型保护是通过构造函数来细化类型的一种方式。我们把之前的例子做一个小小的改造：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Bird &#123;</span><br><span class="line">  fly() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bird fly'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  layEggs() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bird lay eggs'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Fish &#123;</span><br><span class="line">  swim() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fish swim'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  layEggs() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fish lay eggs'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomPet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> ? <span class="keyword">new</span> Bird() : <span class="keyword">new</span> Fish();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pet = getRandomPet();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pet <span class="keyword">instanceof</span> Bird) &#123;</span><br><span class="line">  pet.fly();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pet <span class="keyword">instanceof</span> Fish) &#123;</span><br><span class="line">  pet.swim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可以为-null-的类型"><a href="#可以为-null-的类型" class="headerlink" title="可以为 null 的类型"></a>可以为 null 的类型</h2><p>TypeScript 具有两种特殊的类型，<code>null</code> 和 <code>undefined</code>，它们分别具有值 <code>null</code> 和 <code>undefined</code>。 默认情况下，类型检查器认为 <code>null</code> 与 <code>undefined</code> 可以赋值给任何类型。 <code>null</code> 与 <code>undefined</code> 是所有其它类型的一个有效值。 这也意味着，你阻止不了将它们赋值给其它类型，就算是你想要阻止这种情况也不行。<code>null</code>的发明者，Tony Hoare，称它为<a href="https://en.wikipedia.org/wiki/Null_pointer#History" target="_blank" rel="noopener">价值亿万美金的错误</a>。</p><p><code>--strictNullChecks</code> 标记可以解决此错误：当你声明一个变量时，它不会自动地包含 <code>null</code> 或 <code>undefined</code>。 你可以使用联合类型明确的包含它们：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'foo'</span>;</span><br><span class="line">s = <span class="literal">null</span>; <span class="comment">// 错误, 'null'不能赋值给'string'</span></span><br><span class="line"><span class="keyword">let</span> sn: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="string">'bar'</span>;</span><br><span class="line">sn = <span class="literal">null</span>; <span class="comment">// 可以</span></span><br><span class="line"></span><br><span class="line">sn = <span class="literal">undefined</span>; <span class="comment">// error, 'undefined'不能赋值给'string | null'</span></span><br></pre></td></tr></table></figure><p>注意，按照 JavaScript 的语义，TypeScript 会把 <code>null</code> 和 <code>undefined</code> 区别对待。<code>string | null</code>，<code>string | undefined</code> 和 <code>string | undefined | null</code> 是不同的类型。</p><h3 id="可选参数和可选属性"><a href="#可选参数和可选属性" class="headerlink" title="可选参数和可选属性"></a>可选参数和可选属性</h3><p>使用了 <code>--strictNullChecks</code>，可选参数会被自动地加上 <code>| undefined</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + (y || <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">f(<span class="number">1</span>);</span><br><span class="line">f(<span class="number">1</span>, <span class="literal">undefined</span>);</span><br><span class="line">f(<span class="number">1</span>, <span class="literal">null</span>); <span class="comment">// error, 'null' 不能赋值给 'number | undefined'</span></span><br></pre></td></tr></table></figure><p>可选属性也会有同样的处理：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">  a: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C();</span><br><span class="line">c.a = <span class="number">12</span>;</span><br><span class="line">c.a = <span class="literal">undefined</span>; <span class="comment">// error, 'undefined' 不能赋值给 'number'</span></span><br><span class="line">c.b = <span class="number">13</span>;</span><br><span class="line">c.b = <span class="literal">undefined</span>; <span class="comment">// ok</span></span><br><span class="line">c.b = <span class="literal">null</span>; <span class="comment">// error, 'null' 不能赋值给 'number | undefined'</span></span><br></pre></td></tr></table></figure><h3 id="类型保护和类型断言"><a href="#类型保护和类型断言" class="headerlink" title="类型保护和类型断言"></a>类型保护和类型断言</h3><p>由于可以为 <code>null</code> 的类型能和其它类型定义为联合类型，那么你需要使用类型保护来去除 <code>null</code>。幸运地是这与在 <code>JavaScript</code> 里写的代码一致：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">sn: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (sn === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'default'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很明显地去除了 <code>null</code>，你也可以使用短路运算符：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">sn: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sn || <span class="string">'default'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果编译器不能够去除 <code>null</code> 或 <code>undefined</code>，你可以使用类型断言手动去除。语法是添加 <code>!</code> 后缀： <code>identifier!</code> 从 <code>identifier</code> 的类型里去除了 <code>null</code> 和 <code>undefined</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">broken</span>(<span class="params">name: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postfix</span>(<span class="params">epithet: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name.charAt(<span class="number">0</span>) + <span class="string">'.  the '</span> + epithet; <span class="comment">// error, 'name' 可能为 null</span></span><br><span class="line">  &#125;</span><br><span class="line">  name = name || <span class="string">'Bob'</span>;</span><br><span class="line">  <span class="keyword">return</span> postfix(<span class="string">'great'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixed</span>(<span class="params">name: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postfix</span>(<span class="params">epithet: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name!.charAt(<span class="number">0</span>) + <span class="string">'.  the '</span> + epithet; <span class="comment">// ok</span></span><br><span class="line">  &#125;</span><br><span class="line">  name = name || <span class="string">'Bob'</span>;</span><br><span class="line">  <span class="keyword">return</span> postfix(<span class="string">'great'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">broken(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>本例使用了嵌套函数，因为编译器无法去除嵌套函数的 <code>null</code>（除非是立即调用的函数表达式）。因为它无法跟踪所有对嵌套函数的调用，尤其是你将内层函数做为外层函数的返回值。如果无法知道函数在哪里被调用，就无法知道调用时 <code>name</code> 的类型。</p><h2 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h2><p>字符串字面量类型允许你指定字符串必须具有的确切值。在实际应用中，字符串字面量类型可以与联合类型，类型保护很好的配合。通过结合使用这些特性，你可以实现类似枚举类型的字符串。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Easing = <span class="string">'ease-in'</span> | <span class="string">'ease-out'</span> | <span class="string">'ease-in-out'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> UIElement &#123;</span><br><span class="line">  animate(dx: <span class="built_in">number</span>, dy: <span class="built_in">number</span>, easing: Easing) &#123;</span><br><span class="line">    <span class="keyword">if</span> (easing === <span class="string">'ease-in'</span>) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (easing === <span class="string">'ease-out'</span>) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (easing === <span class="string">'ease-in-out'</span>) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// error! 不能传入 null 或者 undefined.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> button = <span class="keyword">new</span> UIElement();</span><br><span class="line">button.animate(<span class="number">0</span>, <span class="number">0</span>, <span class="string">'ease-in'</span>);</span><br><span class="line">button.animate(<span class="number">0</span>, <span class="number">0</span>, <span class="string">'uneasy'</span>); <span class="comment">// error: Argument of type '"uneasy"' is not assignable to parameter of type '"ease-in" | "ease-out" | "ease-in-out"'</span></span><br></pre></td></tr></table></figure><p>你只能从三种允许的字符中选择其一来做为参数传递，传入其它值则会产生错误。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基础 ts 学习完成了，其实基本上是把慕课网的教程一段一段复制过来的，不过也是为了加深自己的印象，简单问题可以直接看此笔记，如果要查漏补缺还是官网文档靠谱</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="noopener">ts 中文文档</a><br><a href="http://www.typescriptlang.org/docs/handbook/basic-types.html" target="_blank" rel="noopener">ts 官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript学习(6) 类型推断</title>
      <link href="/2019/05/18/learn-ts6/"/>
      <url>/2019/05/18/learn-ts6/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>TypeScript 里，在有些没有明确指出类型的地方，类型推断会帮助提供类型。如下面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>变量 <code>x</code> 的类型被推断为 <code>number</code> 。这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时。</p><h2 id="最佳通用类型"><a href="#最佳通用类型" class="headerlink" title="最佳通用类型"></a>最佳通用类型</h2><p>有些时候我们需要从几个表达式中推断类型，会使用这些表达式的类型来推断出一个最合适的通用类型。例如，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = [<span class="number">0</span>, <span class="number">1</span>, <span class="literal">null</span>];</span><br></pre></td></tr></table></figure><p>为了推断 <code>x</code> 的类型，我们必须考虑所有元素的类型。 这里有两种选择：<code>number</code> 和 <code>null</code>。 计算通用类型算法会考虑所有的候选类型，并给出一个兼容所有候选类型的类型。</p><p>由于最终的通用类型取自候选类型，有些时候候选类型共享一个公共结构，但是却没有一个类型能做为所有候选类型的超级类型。例如：</p><a id="more"></a><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  numLegs: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Bee <span class="keyword">extends</span> Animal &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Lion <span class="keyword">extends</span> Animal &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zoo = [<span class="keyword">new</span> Bee(), <span class="keyword">new</span> Lion()];</span><br></pre></td></tr></table></figure><p>这里，我们想让 <code>zoo</code> 被推断为 <code>Animal[]</code> 类型，但是这个数组里没有对象是 <code>Animal</code> 类型的，因此不能推断出这个结果。 为了更正，我们可以明确的声明我们期望的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> zoo: Animal[] = [<span class="keyword">new</span> Bee(), <span class="keyword">new</span> Lion()];</span><br></pre></td></tr></table></figure><p>如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型，<code>(Bee | Lion)[]</code></p><h2 id="上下文类型"><a href="#上下文类型" class="headerlink" title="上下文类型"></a>上下文类型</h2><p>有些时候，TypeScript 类型推断会按另外一种方式，我们称作“上下文类型”；上下文类型的出现和表达式的类型以及所处的位置相关。比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">mouseEvent</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(mouseEvent.clickTime); <span class="comment">// Error</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个例子会得到一个类型错误，TypeScript 类型检查器使用 <code>window.onmousedown</code> 函数的类型来推断右边函数表达式的类型。 因此，就能推断出 <code>mouseEvent</code> 参数的类型了，所以 <code>mouseEvent</code> 访问了一个不存在的属性，就报错了。</p><p>如果上下文类型表达式包含了明确的类型信息，上下文的类型被忽略。重写上面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">mouseEvent: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(mouseEvent.clickTime); <span class="comment">// OK</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个函数表达式有明确的参数类型注解，上下文类型被忽略。这样的话就不报错了，因为这里不会使用到上下文类型。</p><p>上下文类型会在很多情况下使用到。通常包含函数的参数，赋值表达式的右边，类型断言，对象成员，数组字面量和返回值语句。上下文类型也会做为最佳通用类型的候选类型。比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createZoo</span>(<span class="params"></span>): <span class="title">Animal</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">new</span> Bee(), <span class="keyword">new</span> Lion()];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zoo = createZoo();</span><br></pre></td></tr></table></figure><p>这个例子里，最佳通用类型有 <code>3</code> 个候选者：<code>Animal</code>，<code>Bee</code> 和 <code>Lion</code>。 其中，<code>Animal</code> 会被做为最佳通用类型。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL 通过SSH登录</title>
      <link href="/2019/05/17/wslssh/"/>
      <url>/2019/05/17/wslssh/</url>
      
        <content type="html"><![CDATA[<h2 id="配置ssh-server"><a href="#配置ssh-server" class="headerlink" title="配置ssh server"></a>配置ssh server</h2><p>自带的ssh server不好用（好不好用不知道，反正网上的教程都是这么说的），先卸载再安装即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 卸载</span><br><span class="line">sudo apt-get remove openssh-server</span><br><span class="line">// 安装</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line">// 编辑配置文件</span><br><span class="line">// vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">    Port 22222  <span class="comment"># 默认的是22，但是windows有自己的ssh服务用的也是22端口，修改一下</span></span><br><span class="line">    PubkeyAuthentication yes</span><br><span class="line">    PermitRootLogin prohibit-password</span><br><span class="line"></span><br><span class="line">// 重启ssh服务</span><br><span class="line">sudo service ssh --full-restart</span><br></pre></td></tr></table></figure><h2 id="生成公钥秘钥"><a href="#生成公钥秘钥" class="headerlink" title="生成公钥秘钥"></a>生成公钥秘钥</h2><p><code>xshell</code> &gt; <code>工具</code> &gt;  <code>新建用户秘钥生成向导</code> &gt; 下一步，具体如图。</p><ol><li>第一步<br><img src="http://img.xiaoz.site/20190517135954.png" alt="img-20190517135954"></li></ol><a id="more"></a><ol start="2"><li><p>第二步，默认即可<br><img src="http://img.xiaoz.site/20190517140458.png" alt="20190517140458.png"></p></li><li><p>第三步，记住你的密码<br><img src="http://img.xiaoz.site/20190517140758.png" alt="20190517140758.png"></p></li><li><p>第四步，生成密钥成功，这里展示的是公钥，点击保存为文件,，比如<code>d:\download\key.pub</code><br><img src="http://img.xiaoz.site/20190517140905.png" alt="20190517140905.png"></p></li></ol><h2 id="上传公钥到server"><a href="#上传公钥到server" class="headerlink" title="上传公钥到server"></a>上传公钥到server</h2><p>目标地址是/root/.ssh/authorized_keys文件，没有则新建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">mkdir .ssh</span><br><span class="line">mv /mnt/d/download/key.pub /root/.ssh</span><br><span class="line">cat key.pub &gt; authorized_keys</span><br></pre></td></tr></table></figure><p>wsl可以直接访问到windows的文件，在 <code>/mnt</code> 目录下</p><h2 id="设置文件权限"><a href="#设置文件权限" class="headerlink" title="设置文件权限"></a>设置文件权限</h2><p>这一步很重要，之前看的有些教程没有写这一步，导致一直连接不上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure><h2 id="重启ssh"><a href="#重启ssh" class="headerlink" title="重启ssh"></a>重启ssh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh --full-restart</span><br></pre></td></tr></table></figure><h2 id="xshell-连接ssh"><a href="#xshell-连接ssh" class="headerlink" title="xshell 连接ssh"></a>xshell 连接ssh</h2><ol><li><p>第一步，填写主机和端口<br><img src="http://img.xiaoz.site/20190517141621.png" alt="20190517141621.png"></p></li><li><p>第二步，设置验证方式，选择 <code>Public Key</code>，选择相应秘钥，输入之前设置的密码<br><img src="http://img.xiaoz.site/20190517141736.png" alt="20190517141736.png"></p></li><li><p>第三步，点击连接，搞定<br><img src="http://img.xiaoz.site/20190517142018.png" alt="20190517142018.png"></p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/039411d2c1f6" target="_blank" rel="noopener">使用xshell登录ubuntu on windows(wsl)</a></p><p><a href="http://www.mixoo.cn/2018/03/26/wsl-ssh-login/" target="_blank" rel="noopener">WSL 通过SSH登录</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eslint 禁用规则</title>
      <link href="/2019/05/17/doc/eslintDisable/"/>
      <url>/2019/05/17/doc/eslintDisable/</url>
      
        <content type="html"><![CDATA[<h2 id="块禁用"><a href="#块禁用" class="headerlink" title="块禁用"></a>块禁用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br><span class="line"><span class="comment">/* eslint-enable */</span></span><br></pre></td></tr></table></figure><h2 id="块指定的规则禁用"><a href="#块指定的规则禁用" class="headerlink" title="块指定的规则禁用"></a>块指定的规则禁用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-alert, no-console */</span></span><br><span class="line">alert(<span class="string">'foo'</span>);<span class="built_in">console</span>.log(<span class="string">'bar'</span>);</span><br><span class="line"><span class="comment">/* eslint-enable no-alert, no-console */</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="整个文件禁用"><a href="#整个文件禁用" class="headerlink" title="整个文件禁用"></a>整个文件禁用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><h2 id="整个文件禁用指定的规则"><a href="#整个文件禁用指定的规则" class="headerlink" title="整个文件禁用指定的规则"></a>整个文件禁用指定的规则</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-alert */</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><h2 id="行注释"><a href="#行注释" class="headerlink" title="行注释"></a>行注释</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'foo'</span>); <span class="comment">// eslint-disable-line</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><h2 id="行禁用禁用指定的规则"><a href="#行禁用禁用指定的规则" class="headerlink" title="行禁用禁用指定的规则"></a>行禁用禁用指定的规则</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'foo'</span>); <span class="comment">// eslint-disable-line no-alert, quotes, semi</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-alert, quotes, semi</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><h2 id="禁用插件规则"><a href="#禁用插件规则" class="headerlink" title="禁用插件规则"></a>禁用插件规则</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo(<span class="number">123</span>); <span class="comment">// eslint-disable-line 插件名/规则名</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript学习(5) 泛型</title>
      <link href="/2019/05/16/learn-ts5/"/>
      <url>/2019/05/16/learn-ts5/</url>
      
        <content type="html"><![CDATA[<p>泛型为定义提供了重用性，在创建大型系统时为你提供了十分灵活的功能</p><h2 id="基础实例"><a href="#基础实例" class="headerlink" title="基础实例"></a>基础实例</h2><p>创建一个 <code>identity</code> 函数，它会返回任何传入值，如果不用泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是使用 <code>any</code> 会导致 ts 不提供类型检查，我们需要知道传入类型和返回类型是相同的，所以需要使用泛型，泛型是一种 <em>类型变量</em> ，它值用于表示类型而不是值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>我们给 <code>identity</code> 添加了类型变量 <code>T</code>。 <code>T</code> 帮助我们捕获用户传入的类型（比如：<code>number</code>），之后我们就可以使用这个类型。 之后我们再次使用了 <code>T</code> 当做返回值类型。现在我们可以知道参数类型与返回值类型是相同的了。这允许我们跟踪函数里使用的类型的信息。</p><p>定义了泛型之后，有两种方法使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">'myString'</span>);</span><br><span class="line"><span class="keyword">let</span> output1 = identity(<span class="string">'myString'</span>);</span><br></pre></td></tr></table></figure><p>第一种明确制定了 <code>T</code> 是 <code>string</code> 类型，并作为一个参数传给函数<br>第二种利用了 <em>类型推论</em> ，ts 会根据参数自动确定 T 的类型<br>一般同第二种就好了，当 ts 无法推断时，用第一种</p><h2 id="泛型变量"><a href="#泛型变量" class="headerlink" title="泛型变量"></a>泛型变量</h2><p>泛型变量可以当做类型的一部分使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length); <span class="comment">// error: Property 'length' does not exist on type 'T'.</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型变量 <code>T</code> 代表的是任意类型，所以使用这个函数的人可能传入的是个数字，而数字是没有 <code>.length</code> 属性的，ts 会报错</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用以上方式写，参数 <code>arg</code> 是一个数组，所以有 length 属性，此时 <code>T</code> 表示数组元素的类型</p><h2 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myIdentity: &lt;U&gt;<span class="function">(<span class="params">arg: U</span>) =&gt;</span> U = identity;</span><br></pre></td></tr></table></figure><p>可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。</p><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn &#123;</span><br><span class="line">  &lt;T&gt;(arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编辑器会建议修改为类型别名的写法</span></span><br><span class="line"><span class="comment">// type GenericIdentityFn = &lt;T&gt;(arg: T) =&gt; T</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn = identity;</span><br></pre></td></tr></table></figure><p>我们还可以把泛型参数当作整个接口的一个参数。 这样我们就能清楚的知道使用的具体是哪个泛型类型（比如： <code>Dictionary&lt;string&gt;</code> 而不只是 <code>Dictionary</code> ）。这样接口里的其它成员也能知道这个参数的类型了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn&lt;T&gt; &#123;</span><br><span class="line">  (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编辑器会建议修改为：</span></span><br><span class="line"><span class="comment">// type GenericIdentityFn&lt;T&gt; = (arg: T) =&gt; T;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure><p>注意，我们的示例做了少许改动。 不再描述泛型函数，而是把非泛型函数签名作为泛型类型一部分。 当我们使用 <code>GenericIdentityFn</code> 的时候，还得传入一个类型参数来指定泛型类型（这里是： <code>number</code> ），锁定了之后代码里使用的类型。对于描述哪部分类型属于泛型部分来说，理解何时把参数放在调用签名里和何时放在接口上是很有帮助的</p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>泛型类看上去与泛型接口差不多。 泛型类使用 <code>&lt;&gt;</code> 括起泛型类型，跟在类名后面</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">  zeroValue: T;</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>与接口一样，直接把泛型类型放在类后面，可以帮助我们确认类的所有属性都在使用相同的类型。</p><p>类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型</p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length); <span class="comment">// error: Property 'length' does not exist on type 'T'</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要修正上面的例子中的错误，可以使用到泛型约束</p><p>我们定义一个接口来描述约束条件，创建一个包含 <code>.length</code> 属性的接口，使用这个接口和 <code>extends</code> 关键字来实现约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length); <span class="comment">// OK</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(<span class="number">3</span>); <span class="comment">// Error</span></span><br><span class="line">loggingIdentity(&#123; length: <span class="number">10</span>, value: <span class="number">3</span> &#125;); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>我们需要传入符合约束类型的值，必须包含必须的属性</p><h2 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h2><p>你可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。 并且我们想要确保这个属性存在于对象 <code>obj</code> 上，因此我们需要在这两个类型之间使用约束。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; a: <span class="number">1</span>, b: <span class="number">2</span>, c: <span class="number">3</span>, d: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">getProperty(x, <span class="string">'a'</span>); <span class="comment">// okay</span></span><br><span class="line">getProperty(x, <span class="string">'m'</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React &amp; Redux in TypeScript</title>
      <link href="/2019/05/16/doc/ReactReduxInTypeScript/"/>
      <url>/2019/05/16/doc/ReactReduxInTypeScript/</url>
      
        <content type="html"><![CDATA[<p>xiaOz的翻译计划第一波！计划中，先慢慢来哈🤣，近期开始更新</p><a id="more"></a><div align="center"><br><br>## React &amp; Redux in TypeScript - Static Typing Guide<br><br><em>“This guide is a <strong>living compendium</strong> documenting the most important patterns and recipes on how to use <strong>React</strong> (and its Ecosystem) in a <strong>functional style</strong> using <strong>TypeScript</strong>. It will help you make your code <strong>completely type-safe</strong> while focusing on <strong>inferring the types from implementation</strong> so there is less noise coming from excessive type annotations and it’s easier to write and maintain correct types in the long run.”</em><br><br><a href="https://gitter.im/react-redux-typescript-guide/Lobby" target="_blank" rel="noopener"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/react-redux-typescript-guide/Lobby"></a><br><br>:star: <em>Found it useful? Want more updates?</em> <a href="https://github.com/piotrwitek/react-redux-typescript-guide/stargazers" target="_blank" rel="noopener"><strong>Show your support by giving a :star:</strong></a><br><br>:tada: <em>Now updated to support <strong>TypeScript v3.4</strong></em> :tada:<br><br><a href="https://www.buymeacoffee.com/zh9guxbA5" target="_blank" rel="noopener"><br>  <img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Buy Me a Coffee"><br></a><br><a href="https://www.patreon.com/piotrekwitek" target="_blank" rel="noopener"><br>  <img src="https://c5.patreon.com/external/logo/become_a_patron_button@2x.png" alt="Become a Patron" width="160"><br></a><br><br></div><p><strong>Goals</strong></p><ul><li>Complete type safety (with <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener"><code>--strict</code></a> flag) without losing type information downstream through all the layers of our application (e.g. no type assertions or hacking with <code>any</code> type)</li><li>Make type annotations concise by eliminating redundancy in types using advanced TypeScript Language features like <strong>Type Inference</strong> and <strong>Control flow analysis</strong></li><li>Reduce repetition and complexity of types with TypeScript focused <a href="#complementary-libraries">complementary libraries</a></li></ul><p><strong>React, Redux, Typescript Ecosystem</strong></p><ul><li><a href="https://github.com/piotrwitek/typesafe-actions" target="_blank" rel="noopener">typesafe-actions</a> - Typesafe utilities for “action-creators” in Redux / Flux Architecture  </li><li><a href="https://github.com/piotrwitek/utility-types" target="_blank" rel="noopener">utility-types</a> - Collection of generic types for TypeScript, complementing built-in mapped types and aliases - think lodash for reusable types.  </li><li><a href="https://github.com/piotrwitek/react-redux-typescript-scripts" target="_blank" rel="noopener">react-redux-typescript-scripts</a> - dev-tools configuration files shared between projects based on this guide  </li></ul><p><strong>Codesandbox links</strong></p><ul><li>Reference Todo-App implementation using <strong>React, Redux, Typescript Guide</strong>: <a href="https://codesandbox.io/s/github/piotrwitek/typesafe-actions/tree/master/codesandbox" target="_blank" rel="noopener">Link</a></li></ul><p><strong>Playground Project</strong></p><p><a href="https://semaphoreci.com/piotrekwitek/react-redux-typescript-guide" target="_blank" rel="noopener"><img src="https://semaphoreci.com/api/v1/piotrekwitek/react-redux-typescript-guide/branches/master/shields_badge.svg" alt="Build Status"></a></p><p>You should check out Playground Project located in the <code>/playground</code> folder. It is a source of all the code examples found in the guide. They are all tested with the most recent version of TypeScript and 3rd party type-definitions (like <code>@types/react</code> or <code>@types/react-redux</code>) to ensure the examples are up-to-date and not broken with updated definitions. It’s based on <code>create-react-app --typescript</code>.</p><blockquote><p>Playground project was created so that you can simply clone the repository locally and immediately play around with all the component patterns found in the guide. It will help you to learn all the examples from this guide in a real project environment without the need to create complicated environment setup by yourself.</p></blockquote><h2 id="Contributing-Guide"><a href="#Contributing-Guide" class="headerlink" title="Contributing Guide"></a>Contributing Guide</h2><p>We are open for contributions. If you’re planning to contribute please make sure to read the contributing guide: <a href="/CONTRIBUTING.md">CONTRIBUTING.md</a></p><h2 id="Funding"><a href="#Funding" class="headerlink" title="Funding"></a>Funding</h2><p>This is an independent open-source project created by people investing their free time for the benefit of our community.</p><p>If you are using it please consider donating as this will guarantee the project will be updated and maintained in the long run.</p><p>Issues can be funded by anyone interested in them being resolved. Reward will be transparently distributed to the contributor handling the task through the IssueHunt platform.</p><p><a href="https://issuehunt.io/repos/76996763" target="_blank" rel="noopener"><img src="https://issuehunt.io/static/embed/issuehunt-button-v1.svg" alt="Let&#39;s fund issues in this repository"></a></p><hr><p>🌟 - <em>New or updated section</em></p><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#installation">Installation</a></li><li><a href="#react---type-definitions-cheatsheet">React - Type-Definitions Cheatsheet</a></li><li><a href="#react---typing-patterns">React - Typing Patterns</a><ul><li><a href="#function-components---fc">Function Components - FC</a></li><li><a href="#class-components">Class Components </a></li><li><a href="#generic-components">Generic Components</a></li><li><a href="#render-props">Render Props</a></li><li><a href="#higher-order-components">Higher-Order Components</a></li><li><a href="#redux-connected-components">Redux Connected Components</a></li><li><a href="#context">Context</a></li><li><a href="#hooks">Hooks</a> 🌟</li></ul></li><li><a href="#redux---typing-patterns">Redux - Typing Patterns</a><ul><li><a href="#store-configuration">Store Configuration</a></li><li><a href="#action-creators">Action Creators</a></li><li><a href="#reducers">Reducers</a><ul><li><a href="#state-with-type-level-immutability">State with Type-level Immutability</a></li><li><a href="#typing-regular-reducer">Typing regular reducer</a></li><li><a href="#typing-reducer-with-typesafe-actions">Typing reducer with <code>typesafe-actions</code></a> 🌟</li><li><a href="#testing-reducer">Testing reducer</a></li></ul></li><li><a href="#async-flow-with-redux-observable">Async Flow with <code>redux-observable</code></a><ul><li><a href="#typing-epics">Typing Epics</a></li><li><a href="#testing-epics">Testing Epics</a></li></ul></li><li><a href="#selectors-with-reselect">Selectors with <code>reselect</code></a></li><li><a href="#connect-with-react-redux">Connect with <code>react-redux</code></a><ul><li><a href="#typing-connected-component">Typing connected component</a></li><li><a href="#typing-connected-component-using-redux-thunk-action-creators">Typing connected component using <code>redux-thunk</code> action creators</a> 🌟</li></ul></li></ul></li><li><a href="#configuration--dev-tools">Configuration &amp; Dev Tools</a><ul><li><a href="#common-npm-scripts">Common Npm Scripts</a></li><li><a href="#typescript">TypeScript</a></li><li><a href="#tslib">TSLib</a></li><li><a href="#tslint">TSLint</a></li><li><a href="#eslint">ESLint</a> 🌟</li><li><a href="#jest">Jest</a></li><li><a href="#style-guide">Style Guide</a></li></ul></li><li><a href="#recipes">Recipes</a><ul><li><a href="#general-tips">General Tips</a></li><li><a href="#ambient-modules-tips">Ambient Modules Tips</a></li><li><a href="#type-definitions-tips">Type-Definitions Tips</a></li><li><a href="#type-augmentation-tips">Type Augmentation Tips</a></li></ul></li><li><a href="#tutorials--articles">Tutorials &amp; Articles</a></li><li><a href="#contributors">Contributors</a></li></ul><hr><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><h3 id="Type-Definitions-for-React-amp-Redux"><a href="#Type-Definitions-for-React-amp-Redux" class="headerlink" title="Type-Definitions for React &amp; Redux"></a>Type-Definitions for React &amp; Redux</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @types/react @types/react-dom @types/react-redux</span><br></pre></td></tr></table></figure><p>“react” - <code>@types/react</code><br>“react-dom” - <code>@types/react-dom</code><br>“redux” - (types included with npm package)*<br>“react-redux” - <code>@types/react-redux</code>  </p><blockquote><p>*NB: Guide is based on types for Redux &gt;= v4.x.x. To make it work with Redux v3.x.x please refer to <a href="https://github.com/piotrwitek/react-redux-typescript-guide/blob/master/playground/tsconfig.json#L5" target="_blank" rel="noopener">this config</a>)  </p></blockquote><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h1 id="React-Type-Definitions-Cheatsheet"><a href="#React-Type-Definitions-Cheatsheet" class="headerlink" title="React - Type-Definitions Cheatsheet"></a>React - Type-Definitions Cheatsheet</h1><h4 id="React-FunctionComponent-lt-P-gt-or-React-FC-lt-P-gt"><a href="#React-FunctionComponent-lt-P-gt-or-React-FC-lt-P-gt" class="headerlink" title="React.FunctionComponent&lt;P&gt; or React.FC&lt;P&gt;"></a><code>React.FunctionComponent&lt;P&gt;</code> or <code>React.FC&lt;P&gt;</code></h4><p>Type representing a functional component<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const MyComponent: React.FC&lt;Props&gt; = ...</span><br></pre></td></tr></table></figure></p><h4 id="React-Component-lt-P-S-gt"><a href="#React-Component-lt-P-S-gt" class="headerlink" title="React.Component&lt;P, S&gt;"></a><code>React.Component&lt;P, S&gt;</code></h4><p>Type representing a class component<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component&lt;Props, State&gt; &#123; ...</span><br></pre></td></tr></table></figure></p><h4 id="React-ComponentProps-lt-typeof-Component-gt"><a href="#React-ComponentProps-lt-typeof-Component-gt" class="headerlink" title="React.ComponentProps&lt;typeof Component&gt;"></a><code>React.ComponentProps&lt;typeof Component&gt;</code></h4><p>Gets type of Component Props, so you don’t need to export Props from your component ever! (Works for both FC and Class components)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type MyComponentProps = React.ComponentProps&lt;typeof MyComponent&gt;;</span><br></pre></td></tr></table></figure></p><h4 id="React-ComponentType-lt-P-gt"><a href="#React-ComponentType-lt-P-gt" class="headerlink" title="React.ComponentType&lt;P&gt;"></a><code>React.ComponentType&lt;P&gt;</code></h4><p>Type representing union type of (React.FC | React.Component)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const withState = &lt;P extends WrappedComponentProps&gt;(</span><br><span class="line">  WrappedComponent: React.ComponentType&lt;P&gt;,</span><br><span class="line">) =&gt; &#123; ...</span><br></pre></td></tr></table></figure></p><h4 id="React-ReactElement-or-JSX-Element"><a href="#React-ReactElement-or-JSX-Element" class="headerlink" title="React.ReactElement or JSX.Element"></a><code>React.ReactElement</code> or <code>JSX.Element</code></h4><p>Type representing a concept of React Element - representation of a native DOM component (e.g. <code>&lt;div /&gt;</code>), or a user-defined composite component (e.g. <code>&lt;MyComponent /&gt;</code>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const elementOnly: React.ReactElement = &lt;div /&gt; || &lt;MyComponent /&gt;;</span><br></pre></td></tr></table></figure></p><h4 id="React-ReactNode"><a href="#React-ReactNode" class="headerlink" title="React.ReactNode"></a><code>React.ReactNode</code></h4><p>Type representing any possible type of React node (basically ReactElement (including Fragments and Portals) + primitive JS types)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const elementOrPrimitive: React.ReactNode = &apos;string&apos; || 0 || false || null || undefined || &lt;div /&gt; || &lt;MyComponent /&gt;;</span><br><span class="line">const Component = (&#123; children: React.ReactNode &#125;) =&gt; ...</span><br></pre></td></tr></table></figure></p><h4 id="React-CSSProperties"><a href="#React-CSSProperties" class="headerlink" title="React.CSSProperties"></a><code>React.CSSProperties</code></h4><p>Type representing style object in JSX (useful for css-in-js styles)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const styles: React.CSSProperties = &#123; flexDirection: &apos;row&apos;, ...</span><br><span class="line">const element = &lt;div style=&#123;styles&#125; ...</span><br></pre></td></tr></table></figure></p><h4 id="React-ReactEventHandler-lt-E-gt"><a href="#React-ReactEventHandler-lt-E-gt" class="headerlink" title="React.ReactEventHandler&lt;E&gt;"></a><code>React.ReactEventHandler&lt;E&gt;</code></h4><p>Type representing generic event handler<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const handleChange: React.ReactEventHandler&lt;HTMLInputElement&gt; = (ev) =&gt; &#123; ... &#125; </span><br><span class="line"></span><br><span class="line">&lt;input onChange=&#123;handleChange&#125; ... /&gt;</span><br></pre></td></tr></table></figure></p><h4 id="React-MouseEvent-lt-E-gt-React-KeyboardEvent-lt-E-gt-React-TouchEvent-lt-E-gt-etc…"><a href="#React-MouseEvent-lt-E-gt-React-KeyboardEvent-lt-E-gt-React-TouchEvent-lt-E-gt-etc…" class="headerlink" title="React.MouseEvent&lt;E&gt; | React.KeyboardEvent&lt;E&gt; | React.TouchEvent&lt;E&gt; etc…"></a><code>React.MouseEvent&lt;E&gt;</code> | <code>React.KeyboardEvent&lt;E&gt;</code> | <code>React.TouchEvent&lt;E&gt;</code> etc…</h4><p>Type representing more specific event handler<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const handleChange = (ev: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&lt;div onMouseMove=&#123;handleChange&#125; ... /&gt;</span><br></pre></td></tr></table></figure></p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h1 id="React-Typing-Patterns"><a href="#React-Typing-Patterns" class="headerlink" title="React - Typing Patterns"></a>React - Typing Patterns</h1><h2 id="Function-Components-FC"><a href="#Function-Components-FC" class="headerlink" title="Function Components - FC"></a>Function Components - FC</h2><h4 id="FC-counter"><a href="#FC-counter" class="headerlink" title="- FC counter"></a>- FC counter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  label: string;</span><br><span class="line">  count: number;</span><br><span class="line">  onIncrement: () =&gt; void;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const FCCounter: React.FC&lt;Props&gt; = props =&gt; &#123;</span><br><span class="line">  const &#123; label, count, onIncrement &#125; = props;</span><br><span class="line"></span><br><span class="line">  const handleIncrement = () =&gt; &#123;</span><br><span class="line">    onIncrement();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">        &#123;label&#125;: &#123;count&#125;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;button type=&quot;button&quot; onClick=&#123;handleIncrement&#125;&gt;</span><br><span class="line">        &#123;`Increment`&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://piotrwitek.github.io/react-redux-typescript-guide/#fccounter" target="_blank" rel="noopener">⟩⟩⟩ demo</a></p><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="spread-attributes-link"><a href="#spread-attributes-link" class="headerlink" title="- spread attributes link"></a>- spread attributes <a href="https://facebook.github.io/react/docs/jsx-in-depth.html#spread-attributes" target="_blank" rel="noopener">link</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  className?: string;</span><br><span class="line">  style?: React.CSSProperties;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const FCSpreadAttributes: React.FC&lt;Props&gt; = props =&gt; &#123;</span><br><span class="line">  const &#123; children, ...restProps &#125; = props;</span><br><span class="line"></span><br><span class="line">  return &lt;div &#123;...restProps&#125;&gt;&#123;children&#125;&lt;/div&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://piotrwitek.github.io/react-redux-typescript-guide/#fcspreadattributes" target="_blank" rel="noopener">⟩⟩⟩ demo</a></p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Class-Components"><a href="#Class-Components" class="headerlink" title="Class Components"></a>Class Components</h2><h4 id="class-counter"><a href="#class-counter" class="headerlink" title="- class counter"></a>- class counter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  label: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type State = &#123;</span><br><span class="line">  count: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export class ClassCounter extends React.Component&lt;Props, State&gt; &#123;</span><br><span class="line">  readonly state: State = &#123;</span><br><span class="line">    count: 0,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleIncrement = () =&gt; &#123;</span><br><span class="line">    this.setState(&#123; count: this.state.count + 1 &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; handleIncrement &#125; = this;</span><br><span class="line">    const &#123; label &#125; = this.props;</span><br><span class="line">    const &#123; count &#125; = this.state;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">          &#123;label&#125;: &#123;count&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;button type=&quot;button&quot; onClick=&#123;handleIncrement&#125;&gt;</span><br><span class="line">          &#123;`Increment`&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://piotrwitek.github.io/react-redux-typescript-guide/#classcounter" target="_blank" rel="noopener">⟩⟩⟩ demo</a></p><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="with-default-props"><a href="#with-default-props" class="headerlink" title="- with default props"></a>- with default props</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  label: string;</span><br><span class="line">  initialCount: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type State = &#123;</span><br><span class="line">  count: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export class ClassCounterWithDefaultProps extends React.Component&lt;</span><br><span class="line">  Props,</span><br><span class="line">  State</span><br><span class="line">&gt; &#123;</span><br><span class="line">  static defaultProps = &#123;</span><br><span class="line">    initialCount: 0,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  readonly state: State = &#123;</span><br><span class="line">    count: this.props.initialCount,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps(&#123; initialCount &#125;: Props) &#123;</span><br><span class="line">    if (initialCount != null &amp;&amp; initialCount !== this.props.initialCount) &#123;</span><br><span class="line">      this.setState(&#123; count: initialCount &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleIncrement = () =&gt; &#123;</span><br><span class="line">    this.setState(&#123; count: this.state.count + 1 &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; handleIncrement &#125; = this;</span><br><span class="line">    const &#123; label &#125; = this.props;</span><br><span class="line">    const &#123; count &#125; = this.state;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">          &#123;label&#125;: &#123;count&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;button type=&quot;button&quot; onClick=&#123;handleIncrement&#125;&gt;</span><br><span class="line">          &#123;`Increment`&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://piotrwitek.github.io/react-redux-typescript-guide/#classcounterwithdefaultprops" target="_blank" rel="noopener">⟩⟩⟩ demo</a></p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Generic-Components"><a href="#Generic-Components" class="headerlink" title="Generic Components"></a>Generic Components</h2><ul><li>easily create typed component variations and reuse common logic</li><li>common use case is a generic list components</li></ul><h4 id="generic-list"><a href="#generic-list" class="headerlink" title="- generic list"></a>- generic list</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">export interface GenericListProps&lt;T&gt; &#123;</span><br><span class="line">  items: T[];</span><br><span class="line">  itemRenderer: (item: T) =&gt; JSX.Element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export class GenericList&lt;T&gt; extends React.Component&lt;GenericListProps&lt;T&gt;, &#123;&#125;&gt; &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; items, itemRenderer &#125; = this.props;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;items.map(itemRenderer)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://piotrwitek.github.io/react-redux-typescript-guide/#genericlist" target="_blank" rel="noopener">⟩⟩⟩ demo</a></p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h2><blockquote><p><a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener">https://reactjs.org/docs/render-props.html</a></p></blockquote><h4 id="name-provider"><a href="#name-provider" class="headerlink" title="- name provider"></a>- name provider</h4><blockquote><p>simple component using children as a render prop</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">interface NameProviderProps &#123;</span><br><span class="line">  children: (state: NameProviderState) =&gt; React.ReactNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface NameProviderState &#123;</span><br><span class="line">  readonly name: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export class NameProvider extends React.Component&lt;NameProviderProps, NameProviderState&gt; &#123;</span><br><span class="line">  readonly state: NameProviderState = &#123; name: &apos;Piotr&apos; &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return this.props.children(this.state);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://piotrwitek.github.io/react-redux-typescript-guide/#nameprovider" target="_blank" rel="noopener">⟩⟩⟩ demo</a></p><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="mouse-provider"><a href="#mouse-provider" class="headerlink" title="- mouse provider"></a>- mouse provider</h4><blockquote><p><code>Mouse</code> component found in <a href="https://reactjs.org/docs/render-props.html#use-render-props-for-cross-cutting-concerns" target="_blank" rel="noopener">Render Props React Docs</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">export interface MouseProviderProps &#123;</span><br><span class="line">  render: (state: MouseProviderState) =&gt; React.ReactNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface MouseProviderState &#123;</span><br><span class="line">  readonly x: number;</span><br><span class="line">  readonly y: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export class MouseProvider extends React.Component&lt;MouseProviderProps, MouseProviderState&gt; &#123;</span><br><span class="line">  readonly state: MouseProviderState = &#123; x: 0, y: 0 &#125;;</span><br><span class="line"></span><br><span class="line">  handleMouseMove = (event: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      x: event.clientX,</span><br><span class="line">      y: event.clientY,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div style=&#123;&#123; height: &apos;100%&apos; &#125;&#125; onMouseMove=&#123;this.handleMouseMove&#125;&gt;</span><br><span class="line">        &#123;/*</span><br><span class="line">          Instead of providing a static representation of what &lt;Mouse&gt; renders,</span><br><span class="line">          use the `render` prop to dynamically determine what to render.</span><br><span class="line">        */&#125;</span><br><span class="line">        &#123;this.props.render(this.state)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://piotrwitek.github.io/react-redux-typescript-guide/#mouseprovider" target="_blank" rel="noopener">⟩⟩⟩ demo</a></p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Higher-Order-Components"><a href="#Higher-Order-Components" class="headerlink" title="Higher-Order Components"></a>Higher-Order Components</h2><blockquote><p><a href="https://reactjs.org/docs/higher-order-components.html" target="_blank" rel="noopener">https://reactjs.org/docs/higher-order-components.html</a></p></blockquote><h4 id="withState"><a href="#withState" class="headerlink" title="- withState"></a>- withState</h4><p>Adds state to a stateless counter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import &#123; Subtract &#125; from &apos;utility-types&apos;;</span><br><span class="line"></span><br><span class="line">// These props will be subtracted from base component props</span><br><span class="line">interface InjectedProps &#123;</span><br><span class="line">  count: number;</span><br><span class="line">  onIncrement: () =&gt; void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const withState = &lt;BaseProps extends InjectedProps&gt;(</span><br><span class="line">  _BaseComponent: React.ComponentType&lt;BaseProps&gt;</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  // fix for TypeScript issues: https://github.com/piotrwitek/react-redux-typescript-guide/issues/111</span><br><span class="line">  const BaseComponent = _BaseComponent as React.ComponentType&lt;InjectedProps&gt;;</span><br><span class="line"></span><br><span class="line">  type HocProps = Subtract&lt;BaseProps, InjectedProps&gt; &amp; &#123;</span><br><span class="line">    // here you can extend hoc with new props</span><br><span class="line">    initialCount?: number;</span><br><span class="line">  &#125;;</span><br><span class="line">  type HocState = &#123;</span><br><span class="line">    readonly count: number;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return class Hoc extends React.Component&lt;HocProps, HocState&gt; &#123;</span><br><span class="line">    // Enhance component name for debugging and React-Dev-Tools</span><br><span class="line">    static displayName = `withState($&#123;BaseComponent.name&#125;)`;</span><br><span class="line">    // reference to original wrapped component</span><br><span class="line">    static readonly WrappedComponent = BaseComponent;</span><br><span class="line"></span><br><span class="line">    readonly state: HocState = &#123;</span><br><span class="line">      count: Number(this.props.initialCount) || 0,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    handleIncrement = () =&gt; &#123;</span><br><span class="line">      this.setState(&#123; count: this.state.count + 1 &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      const &#123; ...restProps &#125; = this.props;</span><br><span class="line">      const &#123; count &#125; = this.state;</span><br><span class="line"></span><br><span class="line">      return (</span><br><span class="line">        &lt;BaseComponent</span><br><span class="line">          count=&#123;count&#125; // injected</span><br><span class="line">          onIncrement=&#123;this.handleIncrement&#125; // injected</span><br><span class="line">          &#123;...restProps&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><details><summary><i>Click to expand</i></summary><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; withState &#125; from &apos;../hoc&apos;;</span><br><span class="line">import &#123; FCCounter &#125; from &apos;../components&apos;;</span><br><span class="line"></span><br><span class="line">const FCCounterWithState = withState(FCCounter);</span><br><span class="line"></span><br><span class="line">export default () =&gt; &lt;FCCounterWithState label=&#123;&apos;FCCounterWithState&apos;&#125; /&gt;;</span><br></pre></td></tr></table></figure><br><br></p></details><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="withErrorBoundary"><a href="#withErrorBoundary" class="headerlink" title="- withErrorBoundary"></a>- withErrorBoundary</h4><p>Adds error handling using componentDidCatch to any component</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import &#123; Subtract &#125; from &apos;utility-types&apos;;</span><br><span class="line"></span><br><span class="line">const MISSING_ERROR = &apos;Error was swallowed during propagation.&apos;;</span><br><span class="line"></span><br><span class="line">// These props will be subtracted from base component props</span><br><span class="line">interface InjectedProps &#123;</span><br><span class="line">  onReset: () =&gt; void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const withErrorBoundary = &lt;BaseProps extends InjectedProps&gt;(</span><br><span class="line">  _BaseComponent: React.ComponentType&lt;BaseProps&gt;</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  // fix for TypeScript issues: https://github.com/piotrwitek/react-redux-typescript-guide/issues/111</span><br><span class="line">  const BaseComponent = _BaseComponent as React.ComponentType&lt;InjectedProps&gt;;</span><br><span class="line"></span><br><span class="line">  type HocProps = Subtract&lt;BaseProps, InjectedProps&gt; &amp; &#123;</span><br><span class="line">    // here you can extend hoc with new props</span><br><span class="line">  &#125;;</span><br><span class="line">  type HocState = &#123;</span><br><span class="line">    readonly error: Error | null | undefined;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return class Hoc extends React.Component&lt;HocProps, HocState&gt; &#123;</span><br><span class="line">    // Enhance component name for debugging and React-Dev-Tools</span><br><span class="line">    static displayName = `withErrorBoundary($&#123;BaseComponent.name&#125;)`;</span><br><span class="line">    // reference to original wrapped component</span><br><span class="line">    static readonly WrappedComponent = BaseComponent;</span><br><span class="line"></span><br><span class="line">    readonly state: HocState = &#123;</span><br><span class="line">      error: undefined,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    componentDidCatch(error: Error | null, info: object) &#123;</span><br><span class="line">      this.setState(&#123; error: error || new Error(MISSING_ERROR) &#125;);</span><br><span class="line">      this.logErrorToCloud(error, info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logErrorToCloud = (error: Error | null, info: object) =&gt; &#123;</span><br><span class="line">      // TODO: send error report to service provider</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    handleReset = () =&gt; &#123;</span><br><span class="line">      this.setState(&#123; error: undefined &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      const &#123; children, ...restProps &#125; = this.props;</span><br><span class="line">      const &#123; error &#125; = this.state;</span><br><span class="line"></span><br><span class="line">      if (error) &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;BaseComponent</span><br><span class="line">            onReset=&#123;this.handleReset&#125; // injected</span><br><span class="line">            &#123;...restProps&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return children;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><details><summary><i>Click to expand</i></summary><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState&#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; withErrorBoundary &#125; from &apos;../hoc&apos;;</span><br><span class="line">import &#123; ErrorMessage &#125; from &apos;../components&apos;;</span><br><span class="line"></span><br><span class="line">const ErrorMessageWithErrorBoundary =</span><br><span class="line">  withErrorBoundary(ErrorMessage);</span><br><span class="line"></span><br><span class="line">const BrokenComponent = () =&gt; &#123;</span><br><span class="line">  throw new Error(&apos;I\&apos;m broken! Don\&apos;t render me.&apos;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const BrokenButton = () =&gt; &#123;</span><br><span class="line">  const [shouldRenderBrokenComponent, setShouldRenderBrokenComponent] =</span><br><span class="line">    useState(false);</span><br><span class="line"></span><br><span class="line">  if (shouldRenderBrokenComponent) &#123;</span><br><span class="line">    return &lt;BrokenComponent /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;button</span><br><span class="line">      type=&quot;button&quot;</span><br><span class="line">      onClick=&#123;() =&gt; &#123;</span><br><span class="line">        setShouldRenderBrokenComponent(true);</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;`Throw nasty error`&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default () =&gt; (</span><br><span class="line">  &lt;ErrorMessageWithErrorBoundary&gt;</span><br><span class="line">    &lt;BrokenButton /&gt;</span><br><span class="line">  &lt;/ErrorMessageWithErrorBoundary&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><br></p></details><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Redux-Connected-Components"><a href="#Redux-Connected-Components" class="headerlink" title="Redux Connected Components"></a>Redux Connected Components</h2><h4 id="redux-connected-counter"><a href="#redux-connected-counter" class="headerlink" title="- redux connected counter"></a>- redux connected counter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import Types from &apos;MyTypes&apos;;</span><br><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; countersActions, countersSelectors &#125; from &apos;../features/counters&apos;;</span><br><span class="line">import &#123; FCCounter &#125; from &apos;../components&apos;;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state: Types.RootState) =&gt; (&#123;</span><br><span class="line">  count: countersSelectors.getReduxCounter(state.counters),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const dispatchProps = &#123;</span><br><span class="line">  onIncrement: countersActions.increment,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const FCCounterConnected = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  dispatchProps</span><br><span class="line">)(FCCounter);</span><br></pre></td></tr></table></figure><details><summary><i>Click to expand</i></summary><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; FCCounterConnected &#125; from &apos;.&apos;;</span><br><span class="line"></span><br><span class="line">export default () =&gt; &lt;FCCounterConnected label=&#123;&apos;FCCounterConnected&apos;&#125; /&gt;;</span><br></pre></td></tr></table></figure><br><br></p></details><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="redux-connected-counter-with-own-props"><a href="#redux-connected-counter-with-own-props" class="headerlink" title="- redux connected counter with own props"></a>- redux connected counter with own props</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import Types from &apos;MyTypes&apos;;</span><br><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; countersActions, countersSelectors &#125; from &apos;../features/counters&apos;;</span><br><span class="line">import &#123; FCCounter &#125; from &apos;../components&apos;;</span><br><span class="line"></span><br><span class="line">type OwnProps = &#123;</span><br><span class="line">  initialCount?: number;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state: Types.RootState, ownProps: OwnProps) =&gt; (&#123;</span><br><span class="line">  count:</span><br><span class="line">    countersSelectors.getReduxCounter(state.counters) +</span><br><span class="line">    (ownProps.initialCount || 0),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const dispatchProps = &#123;</span><br><span class="line">  onIncrement: countersActions.increment,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const FCCounterConnectedOwnProps = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  dispatchProps</span><br><span class="line">)(FCCounter);</span><br></pre></td></tr></table></figure><details><summary><i>Click to expand</i></summary><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; FCCounterConnectedOwnProps &#125; from &apos;.&apos;;</span><br><span class="line"></span><br><span class="line">export default () =&gt; (</span><br><span class="line">  &lt;FCCounterConnectedOwnProps</span><br><span class="line">    label=&#123;&apos;FCCounterConnectedOwnProps&apos;&#125;</span><br><span class="line">    initialCount=&#123;10&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><br></p></details><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="redux-connected-counter-with-redux-thunk-integration"><a href="#redux-connected-counter-with-redux-thunk-integration" class="headerlink" title="- redux connected counter with redux-thunk integration"></a>- redux connected counter with <code>redux-thunk</code> integration</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import Types from &apos;MyTypes&apos;;</span><br><span class="line">import &#123; bindActionCreators, Dispatch &#125; from &apos;redux&apos;;</span><br><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; countersActions &#125; from &apos;../features/counters&apos;;</span><br><span class="line"></span><br><span class="line">// Thunk Action</span><br><span class="line">const incrementWithDelay = () =&gt; async (dispatch: Dispatch): Promise&lt;void&gt; =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; dispatch(countersActions.increment()), 1000);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state: Types.RootState) =&gt; (&#123;</span><br><span class="line">  count: state.counters.reduxCounter,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = (dispatch: Dispatch&lt;Types.RootAction&gt;) =&gt;</span><br><span class="line">  bindActionCreators(</span><br><span class="line">    &#123;</span><br><span class="line">      onIncrement: incrementWithDelay,</span><br><span class="line">    &#125;,</span><br><span class="line">    dispatch</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">type Props = ReturnType&lt;typeof mapStateToProps&gt; &amp;</span><br><span class="line">  ReturnType&lt;typeof mapDispatchToProps&gt; &amp; &#123;</span><br><span class="line">    label: string;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">export const FCCounter: React.FC&lt;Props&gt; = props =&gt; &#123;</span><br><span class="line">  const &#123; label, count, onIncrement &#125; = props;</span><br><span class="line"></span><br><span class="line">  const handleIncrement = () =&gt; &#123;</span><br><span class="line">    // Thunk action is correctly typed as promise</span><br><span class="line">    onIncrement().then(() =&gt; &#123;</span><br><span class="line">      // ...</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">        &#123;label&#125;: &#123;count&#125;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;button type=&quot;button&quot; onClick=&#123;handleIncrement&#125;&gt;</span><br><span class="line">        &#123;`Increment`&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const FCCounterConnectedBindActionCreators = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(FCCounter);</span><br></pre></td></tr></table></figure><details><summary><i>Click to expand</i></summary><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; FCCounterConnectedBindActionCreators &#125; from &apos;.&apos;;</span><br><span class="line"></span><br><span class="line">export default () =&gt; (</span><br><span class="line">  &lt;FCCounterConnectedBindActionCreators</span><br><span class="line">    label=&#123;&apos;FCCounterConnectedBindActionCreators&apos;&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><br></p></details><p><a href="#table-of-contents">⇧ back to top</a></p><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><blockquote><p><a href="https://reactjs.org/docs/context.html" target="_blank" rel="noopener">https://reactjs.org/docs/context.html</a></p></blockquote><h4 id="ThemeContext"><a href="#ThemeContext" class="headerlink" title="ThemeContext"></a>ThemeContext</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">export type Theme = React.CSSProperties;</span><br><span class="line"></span><br><span class="line">type Themes = &#123;</span><br><span class="line">  dark: Theme;</span><br><span class="line">  light: Theme;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const themes: Themes = &#123;</span><br><span class="line">  dark: &#123;</span><br><span class="line">    color: &apos;black&apos;,</span><br><span class="line">    backgroundColor: &apos;white&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">  light: &#123;</span><br><span class="line">    color: &apos;white&apos;,</span><br><span class="line">    backgroundColor: &apos;black&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export type ThemeContextProps = &#123; theme: Theme; toggleTheme?: () =&gt; void &#125;;</span><br><span class="line">const ThemeContext = React.createContext&lt;ThemeContextProps&gt;(&#123; theme: themes.light &#125;);</span><br><span class="line"></span><br><span class="line">export default ThemeContext;</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="ThemeProvider"><a href="#ThemeProvider" class="headerlink" title="ThemeProvider"></a>ThemeProvider</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ThemeContext, &#123; themes, Theme &#125; from &apos;./theme-context&apos;;</span><br><span class="line">import ToggleThemeButton from &apos;./theme-consumer&apos;;</span><br><span class="line"></span><br><span class="line">interface State &#123;</span><br><span class="line">  theme: Theme;</span><br><span class="line">&#125;</span><br><span class="line">export class ThemeProvider extends React.Component&lt;&#123;&#125;, State&gt; &#123;</span><br><span class="line">  readonly state: State = &#123; theme: themes.light &#125;;</span><br><span class="line"></span><br><span class="line">  toggleTheme = () =&gt; &#123;</span><br><span class="line">    this.setState(state =&gt; (&#123;</span><br><span class="line">      theme: state.theme === themes.light ? themes.dark : themes.light,</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; theme &#125; = this.state;</span><br><span class="line">    const &#123; toggleTheme &#125; = this;</span><br><span class="line">    return (</span><br><span class="line">      &lt;ThemeContext.Provider value=&#123;&#123; theme, toggleTheme &#125;&#125;&gt;</span><br><span class="line">        &lt;ToggleThemeButton /&gt;</span><br><span class="line">      &lt;/ThemeContext.Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="ThemeConsumer"><a href="#ThemeConsumer" class="headerlink" title="ThemeConsumer"></a>ThemeConsumer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import ThemeContext from &apos;./theme-context&apos;;</span><br><span class="line"></span><br><span class="line">type Props = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">export default function ToggleThemeButton(props: Props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;ThemeContext.Consumer&gt;</span><br><span class="line">      &#123;(&#123; theme, toggleTheme &#125;) =&gt; &lt;button style=&#123;theme&#125; onClick=&#123;toggleTheme&#125; &#123;...props&#125; /&gt;&#125;</span><br><span class="line">    &lt;/ThemeContext.Consumer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThemeConsumer-in-class-component"><a href="#ThemeConsumer-in-class-component" class="headerlink" title="ThemeConsumer in class component"></a>ThemeConsumer in class component</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import ThemeContext from &apos;./theme-context&apos;;</span><br><span class="line"></span><br><span class="line">type Props = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">export class ToggleThemeButtonClass extends React.Component&lt;Props&gt; &#123;</span><br><span class="line">  static contextType = ThemeContext;</span><br><span class="line">  context!: React.ContextType&lt;typeof ThemeContext&gt;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; theme, toggleTheme &#125; = this.context;</span><br><span class="line">    return (</span><br><span class="line">      &lt;button style=&#123;theme&#125; onClick=&#123;toggleTheme&#125;&gt;</span><br><span class="line">        Toggle Theme</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#--usecontext">Implementation with Hooks</a></p><p><a href="#table-of-contents">⇧ back to top</a></p><h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><blockquote><p><a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">https://reactjs.org/docs/hooks-intro.html</a></p></blockquote><h4 id="useState"><a href="#useState" class="headerlink" title="- useState"></a>- useState</h4><blockquote><p><a href="https://reactjs.org/docs/hooks-reference.html#usestate" target="_blank" rel="noopener">https://reactjs.org/docs/hooks-reference.html#usestate</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">type Props = &#123; initialCount: number &#125;;</span><br><span class="line"></span><br><span class="line">export default function Counter(&#123;initialCount&#125;: Props) &#123;</span><br><span class="line">  const [count, setCount] = React.useState(initialCount);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(initialCount)&#125;&gt;Reset&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount + 1)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount - 1)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="useReducer"><a href="#useReducer" class="headerlink" title="- useReducer"></a>- useReducer</h4><p>Hook for state management like Redux in a function component.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">interface State &#123;</span><br><span class="line">  count: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Action = &#123; type: &apos;reset&apos; &#125; | &#123; type: &apos;increment&apos; &#125; | &#123; type: &apos;decrement&apos; &#125;;</span><br><span class="line"></span><br><span class="line">function reducer(state: State, action: Action): State &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &apos;increment&apos;:</span><br><span class="line">      return &#123; count: state.count + 1 &#125;;</span><br><span class="line">    case &apos;decrement&apos;:</span><br><span class="line">      return &#123; count: state.count - 1 &#125;;</span><br><span class="line">    case &apos;reset&apos;:</span><br><span class="line">      return &#123; count: 0 &#125;;</span><br><span class="line">    default:</span><br><span class="line">      throw new Error();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface CounterProps &#123;</span><br><span class="line">  initialCount: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Counter(&#123; initialCount &#125;: CounterProps) &#123;</span><br><span class="line">  const [state, dispatch] = React.useReducer(reducer, &#123;</span><br><span class="line">    count: initialCount,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;state.count&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &apos;reset&apos; &#125;)&#125;&gt;Reset&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &apos;increment&apos; &#125;)&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &apos;decrement&apos; &#125;)&#125;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Counter;</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="useContext"><a href="#useContext" class="headerlink" title="- useContext"></a>- useContext</h4><blockquote><p><a href="https://reactjs.org/docs/hooks-reference.html#usecontext" target="_blank" rel="noopener">https://reactjs.org/docs/hooks-reference.html#usecontext</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import ThemeContext from &apos;../context/theme-context&apos;;</span><br><span class="line"></span><br><span class="line">type Props = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">export default function ThemeToggleButton(props: Props) &#123;</span><br><span class="line">  const &#123; theme, toggleTheme &#125; = React.useContext(ThemeContext);</span><br><span class="line">  return (</span><br><span class="line">    &lt;button onClick=&#123;toggleTheme&#125; style=&#123;theme&#125; &gt;</span><br><span class="line">      Toggle Theme</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h1 id="Redux-Typing-Patterns"><a href="#Redux-Typing-Patterns" class="headerlink" title="Redux - Typing Patterns"></a>Redux - Typing Patterns</h1><h2 id="Store-Configuration"><a href="#Store-Configuration" class="headerlink" title="Store Configuration"></a>Store Configuration</h2><h3 id="Create-Global-RootState-and-RootAction-Types"><a href="#Create-Global-RootState-and-RootAction-Types" class="headerlink" title="Create Global RootState and RootAction Types"></a>Create Global RootState and RootAction Types</h3><h4 id="RootState-type-representing-root-state-tree"><a href="#RootState-type-representing-root-state-tree" class="headerlink" title="RootState - type representing root state-tree"></a><code>RootState</code> - type representing root state-tree</h4><p>Can be imported in connected components to provide type-safety to Redux <code>connect</code> function</p><h4 id="RootAction-type-representing-union-type-of-all-action-objects"><a href="#RootAction-type-representing-union-type-of-all-action-objects" class="headerlink" title="RootAction - type representing union type of all action objects"></a><code>RootAction</code> - type representing union type of all action objects</h4><p>Can be imported in various layers receiving or sending redux actions like: reducers, sagas or redux-observables epics</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; StateType, ActionType &#125; from &apos;typesafe-actions&apos;;</span><br><span class="line"></span><br><span class="line">declare module &apos;MyTypes&apos; &#123;</span><br><span class="line">  export type Store = StateType&lt;typeof import(&apos;./index&apos;).default&gt;;</span><br><span class="line">  export type RootAction = ActionType&lt;typeof import(&apos;./root-action&apos;).default&gt;;</span><br><span class="line">  export type RootState = StateType&lt;typeof import(&apos;./root-reducer&apos;).default&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare module &apos;typesafe-actions&apos; &#123;</span><br><span class="line">  interface Types &#123;</span><br><span class="line">    RootAction: ActionType&lt;typeof import(&apos;./root-action&apos;).default&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Create-Store"><a href="#Create-Store" class="headerlink" title="Create Store"></a>Create Store</h3><p>When creating a store instance we don’t need to provide any additional types. It will set-up a <strong>type-safe Store instance</strong> using type inference.</p><blockquote><p>The resulting store instance methods like <code>getState</code> or <code>dispatch</code> will be type checked and will expose all type errors</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import &#123; RootAction, RootState, Services &#125; from &apos;MyTypes&apos;;</span><br><span class="line">import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;;</span><br><span class="line">import &#123; createEpicMiddleware &#125; from &apos;redux-observable&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; composeEnhancers &#125; from &apos;./utils&apos;;</span><br><span class="line">import rootReducer from &apos;./root-reducer&apos;;</span><br><span class="line">import rootEpic from &apos;./root-epic&apos;;</span><br><span class="line">import services from &apos;../services&apos;;</span><br><span class="line"></span><br><span class="line">export const epicMiddleware = createEpicMiddleware&lt;</span><br><span class="line">  RootAction,</span><br><span class="line">  RootAction,</span><br><span class="line">  RootState,</span><br><span class="line">  Services</span><br><span class="line">&gt;(&#123;</span><br><span class="line">  dependencies: services,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// configure middlewares</span><br><span class="line">const middlewares = [epicMiddleware];</span><br><span class="line">// compose enhancers</span><br><span class="line">const enhancer = composeEnhancers(applyMiddleware(...middlewares));</span><br><span class="line"></span><br><span class="line">// rehydrate state on app start</span><br><span class="line">const initialState = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">// create store</span><br><span class="line">const store = createStore(rootReducer, initialState, enhancer);</span><br><span class="line"></span><br><span class="line">epicMiddleware.run(rootEpic);</span><br><span class="line"></span><br><span class="line">// export store singleton instance</span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure><hr><h2 id="Action-Creators"><a href="#Action-Creators" class="headerlink" title="Action Creators"></a>Action Creators</h2><blockquote><p>We’ll be using a battle-tested library <a href="https://www.npmjs.com/package/typesafe-actions" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/dm/typesafe-actions.svg" alt="NPM Downloads"></a><br> that’ll help retain complete type soundness and simplify maintenace of <strong>types in Redux Architectures</strong> <a href="https://github.com/piotrwitek/typesafe-actions#typesafe-actions" target="_blank" rel="noopener"><code>typesafe-actions</code></a></p></blockquote><blockquote><p>You can find more real-world examples and in-depth tutorial in: <a href="https://github.com/piotrwitek/typesafe-actions#tutorial" target="_blank" rel="noopener">Typesafe-Actions - Tutorial</a>!</p></blockquote><p>A solution below is using a simple factory function to automate the creation of type-safe action creators. The goal is to decrease maintenance effort and reduce code repetition of type annotations for actions and creators. The result is completely typesafe action-creators and their actions.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#123; action &#125; from &apos;typesafe-actions&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; ADD, INCREMENT &#125; from &apos;./constants&apos;;</span><br><span class="line"></span><br><span class="line">// CLASSIC API</span><br><span class="line">export const increment = () =&gt; action(INCREMENT);</span><br><span class="line">export const add = (amount: number) =&gt; action(ADD, amount);</span><br><span class="line"></span><br><span class="line">// ALTERNATIVE API - allow to use reference to &quot;action-creator&quot; function instead of &quot;type constant&quot;</span><br><span class="line">// e.g. case getType(increment): return &#123; ... &#125;</span><br><span class="line">// This will allow to completely eliminate need for &quot;constants&quot; in your application, more info here:</span><br><span class="line">// https://github.com/piotrwitek/typesafe-actions#behold-the-mighty-tutorial</span><br><span class="line"></span><br><span class="line">// OPTION 1 (with generics):</span><br><span class="line">// import &#123; createStandardAction &#125; from &apos;typesafe-actions&apos;;</span><br><span class="line">// export const increment = createStandardAction(INCREMENT)&lt;void&gt;();</span><br><span class="line">// export const add = createStandardAction(ADD)&lt;number&gt;();</span><br><span class="line"></span><br><span class="line">// OPTION 2 (with resolve callback):</span><br><span class="line">// import &#123; createAction &#125; from &apos;typesafe-actions&apos;;</span><br><span class="line">// export const increment = createAction(INCREMENT);</span><br><span class="line">// export const add = createAction(ADD, resolve =&gt; &#123;</span><br><span class="line">//   return (amount: number) =&gt; resolve(amount);</span><br><span class="line">// &#125;);</span><br></pre></td></tr></table></figure><details><summary><i>Click to expand</i></summary><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import store from &apos;../../store&apos;;</span><br><span class="line">import &#123; countersActions as counter &#125; from &apos;../counters&apos;;</span><br><span class="line"></span><br><span class="line">// store.dispatch(counter.increment(1)); // Error: Expected 0 arguments, but got 1.</span><br><span class="line">store.dispatch(counter.increment()); // OK</span><br><span class="line"></span><br><span class="line">// store.dispatch(counter.add()); // Error: Expected 1 arguments, but got 0.</span><br><span class="line">store.dispatch(counter.add(1)); // OK</span><br></pre></td></tr></table></figure><br><br></p></details><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Reducers"><a href="#Reducers" class="headerlink" title="Reducers"></a>Reducers</h2><h3 id="State-with-Type-level-Immutability"><a href="#State-with-Type-level-Immutability" class="headerlink" title="State with Type-level Immutability"></a>State with Type-level Immutability</h3><p>Declare reducer <code>State</code> type with <code>readonly</code> modifier to get compile time immutability<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> State = &#123;</span><br><span class="line">  readonly counter: <span class="built_in">number</span>;</span><br><span class="line">  readonly todos: ReadonlyArray&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Readonly modifier allow initialization, but will not allow reassignment by highlighting compiler errors<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initialState: State = &#123;</span><br><span class="line">  counter: <span class="number">0</span>,</span><br><span class="line">&#125;; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">initialState.counter = <span class="number">3</span>; <span class="comment">// TS Error: cannot be mutated</span></span><br></pre></td></tr></table></figure></p><p>It’s great for <strong>Arrays in JS</strong> because it will error when using mutator methods like (<code>push</code>, <code>pop</code>, <code>splice</code>, …), but it’ll still allow immutable methods like (<code>concat</code>, <code>map</code>, <code>slice</code>,…).<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">state.todos.push(<span class="string">'Learn about tagged union types'</span>) <span class="comment">// TS Error: Property 'push' does not exist on type 'ReadonlyArray&lt;string&gt;'</span></span><br><span class="line"><span class="keyword">const</span> newTodos = state.todos.concat(<span class="string">'Learn about tagged union types'</span>) <span class="comment">// OK</span></span><br></pre></td></tr></table></figure></p><h4 id="Caveat-Readonly-is-not-recursive"><a href="#Caveat-Readonly-is-not-recursive" class="headerlink" title="Caveat - Readonly is not recursive"></a>Caveat - <code>Readonly</code> is not recursive</h4><p>This means that the <code>readonly</code> modifier doesn’t propagate immutability down the nested structure of objects. You’ll need to mark each property on each level explicitly.</p><blockquote><p><strong>TIP:</strong> use <code>Readonly</code> or <code>ReadonlyArray</code> <a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html" target="_blank" rel="noopener">Mapped types</a></p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> State = Readonly&lt;&#123;</span><br><span class="line">  counterPairs: ReadonlyArray&lt;Readonly&lt;&#123;</span><br><span class="line">    immutableCounter1: <span class="built_in">number</span>,</span><br><span class="line">    immutableCounter2: <span class="built_in">number</span>,</span><br><span class="line">  &#125;&gt;&gt;,</span><br><span class="line">&#125;&gt;;</span><br><span class="line"></span><br><span class="line">state.counterPairs[<span class="number">0</span>] = &#123; immutableCounter1: <span class="number">1</span>, immutableCounter2: <span class="number">1</span> &#125;; <span class="comment">// TS Error: cannot be mutated</span></span><br><span class="line">state.counterPairs[<span class="number">0</span>].immutableCounter1 = <span class="number">1</span>; <span class="comment">// TS Error: cannot be mutated</span></span><br><span class="line">state.counterPairs[<span class="number">0</span>].immutableCounter2 = <span class="number">1</span>; <span class="comment">// TS Error: cannot be mutated</span></span><br></pre></td></tr></table></figure><h4 id="Solution-recursive-Readonly-is-called-DeepReadonly"><a href="#Solution-recursive-Readonly-is-called-DeepReadonly" class="headerlink" title="Solution - recursive Readonly is called DeepReadonly"></a>Solution - recursive <code>Readonly</code> is called <code>DeepReadonly</code></h4><p>To fix this we can use <a href="https://github.com/piotrwitek/utility-types#deepreadonlyt" target="_blank" rel="noopener"><code>DeepReadonly</code></a> type (available from <code>utility-types</code>).</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DeepReadonly &#125; <span class="keyword">from</span> <span class="string">'utility-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> State = DeepReadonly&lt;&#123;</span><br><span class="line">  containerObject: &#123;</span><br><span class="line">    innerValue: <span class="built_in">number</span>,</span><br><span class="line">    numbers: <span class="built_in">number</span>[],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&gt;;</span><br><span class="line"></span><br><span class="line">state.containerObject = &#123; innerValue: <span class="number">1</span> &#125;; <span class="comment">// TS Error: cannot be mutated</span></span><br><span class="line">state.containerObject.innerValue = <span class="number">1</span>; <span class="comment">// TS Error: cannot be mutated</span></span><br><span class="line">state.containerObject.numbers.push(<span class="number">1</span>); <span class="comment">// TS Error: cannot use mutator methods</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Typing-reducer"><a href="#Typing-reducer" class="headerlink" title="Typing reducer"></a>Typing reducer</h3><blockquote><p>to understand following section make sure to learn about <a href="https://www.typescriptlang.org/docs/handbook/type-inference.html" target="_blank" rel="noopener">Type Inference</a>, <a href="https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#control-flow-based-type-analysis" target="_blank" rel="noopener">Control flow analysis</a> and <a href="https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#tagged-union-types" target="_blank" rel="noopener">Tagged union types</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import &#123; combineReducers &#125; from &apos;redux&apos;;</span><br><span class="line">import &#123; ActionType &#125; from &apos;typesafe-actions&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; Todo, TodosFilter &#125; from &apos;./models&apos;;</span><br><span class="line">import * as actions from &apos;./actions&apos;;</span><br><span class="line">import &#123; ADD, CHANGE_FILTER, TOGGLE &#125; from &apos;./constants&apos;;</span><br><span class="line"></span><br><span class="line">export type TodosAction = ActionType&lt;typeof actions&gt;;</span><br><span class="line"></span><br><span class="line">export type TodosState = Readonly&lt;&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  todosFilter: TodosFilter;</span><br><span class="line">&#125;&gt;;</span><br><span class="line">const initialState: TodosState = &#123;</span><br><span class="line">  todos: [],</span><br><span class="line">  todosFilter: TodosFilter.All,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default combineReducers&lt;TodosState, TodosAction&gt;(&#123;</span><br><span class="line">  todos: (state = initialState.todos, action) =&gt; &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">      case ADD:</span><br><span class="line">        return [...state, action.payload];</span><br><span class="line"></span><br><span class="line">      case TOGGLE:</span><br><span class="line">        return state.map(item =&gt;</span><br><span class="line">          item.id === action.payload</span><br><span class="line">            ? &#123; ...item, completed: !item.completed &#125;</span><br><span class="line">            : item</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">      default:</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  todosFilter: (state = initialState.todosFilter, action) =&gt; &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">      case CHANGE_FILTER:</span><br><span class="line">        return action.payload;</span><br><span class="line"></span><br><span class="line">      default:</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Typing-reducer-with-typesafe-actions"><a href="#Typing-reducer-with-typesafe-actions" class="headerlink" title="Typing reducer with typesafe-actions"></a>Typing reducer with <code>typesafe-actions</code></h3><blockquote><p>Notice we are not required to use any generic type parameter in the API. Try to compare it with regular reducer as they are equivalent.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import &#123; combineReducers &#125; from &apos;redux&apos;;</span><br><span class="line">import &#123; createReducer &#125; from &apos;typesafe-actions&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; Todo, TodosFilter &#125; from &apos;./models&apos;;</span><br><span class="line">import &#123; ADD, CHANGE_FILTER, TOGGLE &#125; from &apos;./constants&apos;;</span><br><span class="line"></span><br><span class="line">export type TodosState = Readonly&lt;&#123;</span><br><span class="line">  todos: Todo[];</span><br><span class="line">  todosFilter: TodosFilter;</span><br><span class="line">&#125;&gt;;</span><br><span class="line">const initialState: TodosState = &#123;</span><br><span class="line">  todos: [],</span><br><span class="line">  todosFilter: TodosFilter.All,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const todos = createReducer(initialState.todos)</span><br><span class="line">  .handleAction(ADD, (state, action) =&gt; [...state, action.payload])</span><br><span class="line">  .handleAction(TOGGLE, (state, action) =&gt;</span><br><span class="line">    state.map(item =&gt;</span><br><span class="line">      item.id === action.payload</span><br><span class="line">        ? &#123; ...item, completed: !item.completed &#125;</span><br><span class="line">        : item</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">const todosFilter = createReducer(initialState.todosFilter).handleAction(</span><br><span class="line">  CHANGE_FILTER,</span><br><span class="line">  (state, action) =&gt; action.payload</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">export default combineReducers(&#123;</span><br><span class="line">  todos,</span><br><span class="line">  todosFilter,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Testing-reducer"><a href="#Testing-reducer" class="headerlink" title="Testing reducer"></a>Testing reducer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">  todosReducer as reducer,</span><br><span class="line">  todosActions as actions,</span><br><span class="line">  TodosState,</span><br><span class="line">&#125; from &apos;./&apos;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * FIXTURES</span><br><span class="line"> */</span><br><span class="line">const getInitialState = (initial?: Partial&lt;TodosState&gt;) =&gt;</span><br><span class="line">  reducer(initial as TodosState, &#123;&#125; as any);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * STORIES</span><br><span class="line"> */</span><br><span class="line">describe(&apos;Todos Stories&apos;, () =&gt; &#123;</span><br><span class="line">  describe(&apos;initial state&apos;, () =&gt; &#123;</span><br><span class="line">    it(&apos;should match a snapshot&apos;, () =&gt; &#123;</span><br><span class="line">      const initialState = getInitialState();</span><br><span class="line">      expect(initialState).toMatchSnapshot();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(&apos;adding todos&apos;, () =&gt; &#123;</span><br><span class="line">    it(&apos;should add a new todo as the first element&apos;, () =&gt; &#123;</span><br><span class="line">      const initialState = getInitialState();</span><br><span class="line">      expect(initialState.todos).toHaveLength(0);</span><br><span class="line">      const state = reducer(initialState, actions.add(&apos;new todo&apos;));</span><br><span class="line">      expect(state.todos).toHaveLength(1);</span><br><span class="line">      expect(state.todos[0].title).toEqual(&apos;new todo&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(&apos;toggling completion state&apos;, () =&gt; &#123;</span><br><span class="line">    it(&apos;should mark active todo as complete&apos;, () =&gt; &#123;</span><br><span class="line">      const activeTodo = &#123; id: &apos;1&apos;, completed: false, title: &apos;active todo&apos; &#125;;</span><br><span class="line">      const initialState = getInitialState(&#123; todos: [activeTodo] &#125;);</span><br><span class="line">      expect(initialState.todos[0].completed).toBeFalsy();</span><br><span class="line">      const state1 = reducer(initialState, actions.toggle(activeTodo.id));</span><br><span class="line">      expect(state1.todos[0].completed).toBeTruthy();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Async-Flow-with-redux-observable"><a href="#Async-Flow-with-redux-observable" class="headerlink" title="Async Flow with redux-observable"></a>Async Flow with <code>redux-observable</code></h2><h3 id="Typing-epics"><a href="#Typing-epics" class="headerlink" title="Typing epics"></a>Typing epics</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; RootAction, RootState, Services &#125; from &apos;MyTypes&apos;;</span><br><span class="line">import &#123; Epic &#125; from &apos;redux-observable&apos;;</span><br><span class="line">import &#123; tap, ignoreElements, filter &#125; from &apos;rxjs/operators&apos;;</span><br><span class="line">import &#123; isOfType &#125; from &apos;typesafe-actions&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; todosConstants &#125; from &apos;../todos&apos;;</span><br><span class="line"></span><br><span class="line">// contrived example!!!</span><br><span class="line">export const logAddAction: Epic&lt;RootAction, RootAction, RootState, Services&gt; = (</span><br><span class="line">  action$,</span><br><span class="line">  state$,</span><br><span class="line">  &#123; logger &#125;</span><br><span class="line">) =&gt;</span><br><span class="line">  action$.pipe(</span><br><span class="line">    filter(isOfType(todosConstants.ADD)), // action is narrowed to: &#123; type: &quot;ADD_TODO&quot;; payload: string; &#125;</span><br><span class="line">    tap(action =&gt; &#123;</span><br><span class="line">      logger.log(</span><br><span class="line">        `action type must be equal: $&#123;todosConstants.ADD&#125; === $&#123;action.type&#125;`</span><br><span class="line">      );</span><br><span class="line">    &#125;),</span><br><span class="line">    ignoreElements()</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Testing-epics"><a href="#Testing-epics" class="headerlink" title="Testing epics"></a>Testing epics</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import &#123; StateObservable, ActionsObservable &#125; from &apos;redux-observable&apos;;</span><br><span class="line">import &#123; RootState, Services, RootAction &#125; from &apos;MyTypes&apos;;</span><br><span class="line">import &#123; Subject &#125; from &apos;rxjs&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; add &#125; from &apos;./actions&apos;;</span><br><span class="line">import &#123; logAddAction &#125; from &apos;./epics&apos;;</span><br><span class="line"></span><br><span class="line">// Simple typesafe mock of all the services, you dont&apos;t need to mock anything else</span><br><span class="line">// It is decoupled and reusable for all your tests, just put it in a separate file</span><br><span class="line">const services = &#123;</span><br><span class="line">  logger: &#123;</span><br><span class="line">    log: jest.fn&lt;Services[&apos;logger&apos;][&apos;log&apos;]&gt;(),</span><br><span class="line">  &#125;,</span><br><span class="line">  localStorage: &#123;</span><br><span class="line">    loadState: jest.fn&lt;Services[&apos;localStorage&apos;][&apos;loadState&apos;]&gt;(),</span><br><span class="line">    saveState: jest.fn&lt;Services[&apos;localStorage&apos;][&apos;saveState&apos;]&gt;(),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">describe(&apos;Todos Epics&apos;, () =&gt; &#123;</span><br><span class="line">  let state$: StateObservable&lt;RootState&gt;;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; &#123;</span><br><span class="line">    state$ = new StateObservable&lt;RootState&gt;(</span><br><span class="line">      new Subject&lt;RootState&gt;(),</span><br><span class="line">      undefined as any</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(&apos;logging todos actions&apos;, () =&gt; &#123;</span><br><span class="line">    beforeEach(() =&gt; &#123;</span><br><span class="line">      services.logger.log.mockClear();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(&apos;should call the logger service when adding a new todo&apos;, done =&gt; &#123;</span><br><span class="line">      const addTodoAction = add(&apos;new todo&apos;);</span><br><span class="line">      const action$ = ActionsObservable.of(addTodoAction);</span><br><span class="line"></span><br><span class="line">      logAddAction(action$, state$, services)</span><br><span class="line">        .toPromise()</span><br><span class="line">        .then((outputAction: RootAction) =&gt; &#123;</span><br><span class="line">          expect(services.logger.log).toHaveBeenCalledTimes(1);</span><br><span class="line">          expect(services.logger.log).toHaveBeenCalledWith(</span><br><span class="line">            &apos;action type must be equal: todos/ADD === todos/ADD&apos;</span><br><span class="line">          );</span><br><span class="line">          // expect output undefined because we&apos;re using &quot;ignoreElements&quot; in epic</span><br><span class="line">          expect(outputAction).toEqual(undefined);</span><br><span class="line">          done();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Selectors-with-reselect"><a href="#Selectors-with-reselect" class="headerlink" title="Selectors with reselect"></a>Selectors with <code>reselect</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createSelector &#125; from &apos;reselect&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; TodosState &#125; from &apos;./reducer&apos;;</span><br><span class="line"></span><br><span class="line">export const getTodos = (state: TodosState) =&gt; state.todos;</span><br><span class="line"></span><br><span class="line">export const getTodosFilter = (state: TodosState) =&gt; state.todosFilter;</span><br><span class="line"></span><br><span class="line">export const getFilteredTodos = createSelector(getTodos, getTodosFilter, (todos, todosFilter) =&gt; &#123;</span><br><span class="line">  switch (todosFilter) &#123;</span><br><span class="line">    case &apos;completed&apos;:</span><br><span class="line">      return todos.filter(t =&gt; t.completed);</span><br><span class="line">    case &apos;active&apos;:</span><br><span class="line">      return todos.filter(t =&gt; !t.completed);</span><br><span class="line"></span><br><span class="line">    default:</span><br><span class="line">      return todos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Connect-with-react-redux"><a href="#Connect-with-react-redux" class="headerlink" title="Connect with react-redux"></a>Connect with <code>react-redux</code></h2><h3 id="Typing-connected-component"><a href="#Typing-connected-component" class="headerlink" title="Typing connected component"></a>Typing connected component</h3><p><em><strong>NOTE</strong>: Below you’ll find only a short explanation of concepts behind typing <code>connect</code>. For more real-world examples please check <a href="#redux-connected-components">Redux Connected Components</a> section.</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import MyTypes from &apos;MyTypes&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; bindActionCreators, Dispatch, ActionCreatorsMapObject &#125; from &apos;redux&apos;;</span><br><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; countersActions &#125; from &apos;../features/counters&apos;;</span><br><span class="line">import &#123; FCCounter &#125; from &apos;../components&apos;;</span><br><span class="line"></span><br><span class="line">// Type annotation for &quot;state&quot; argument is mandatory to check </span><br><span class="line">// the correct shape of state object and injected props you can also</span><br><span class="line">// extend connected component Props interface by annotating `ownProps` argument</span><br><span class="line">const mapStateToProps = (state: MyTypes.RootState, ownProps: FCCounterProps) =&gt; (&#123;</span><br><span class="line">  count: state.counters.reduxCounter,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// &quot;dispatch&quot; argument needs an annotation to check the correct shape</span><br><span class="line">//  of an action object when using dispatch function</span><br><span class="line">const mapDispatchToProps = (dispatch: Dispatch&lt;MyTypes.RootAction&gt;) =&gt;</span><br><span class="line">  bindActionCreators(&#123;</span><br><span class="line">    onIncrement: countersActions.increment,</span><br><span class="line">  &#125;, dispatch);</span><br><span class="line"></span><br><span class="line">// shorter alternative is to use an object instead of mapDispatchToProps function</span><br><span class="line">const dispatchToProps = &#123;</span><br><span class="line">    onIncrement: countersActions.increment,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Notice we don&apos;t need to pass any generic type parameters to neither</span><br><span class="line">// the connect function below nor map functions declared above</span><br><span class="line">// because type inference will infer types from arguments annotations automatically</span><br><span class="line">// This is much cleaner and idiomatic approach</span><br><span class="line">export const FCCounterConnected =</span><br><span class="line">  connect(mapStateToProps, mapDispatchToProps)(FCCounter);</span><br><span class="line"></span><br><span class="line">// You can add extra layer of validation of your action creators</span><br><span class="line">// by using bindActionCreators generic type parameter and RootAction type</span><br><span class="line">const mapDispatchToProps = (dispatch: Dispatch&lt;MyTypes.RootAction&gt;) =&gt;</span><br><span class="line">  bindActionCreators&lt;ActionCreatorsMapObject&lt;Types.RootAction&gt;&gt;(&#123;</span><br><span class="line">    invalidActionCreator: () =&gt; 1, // Error: Type &apos;number&apos; is not assignable to type &apos;&#123; type: &quot;todos/ADD&quot;; payload: Todo; &#125; | &#123; ... &#125;</span><br><span class="line">  &#125;, dispatch);</span><br></pre></td></tr></table></figure><h3 id="Typing-connected-component-using-redux-thunk-action-creators"><a href="#Typing-connected-component-using-redux-thunk-action-creators" class="headerlink" title="Typing connected component using redux-thunk action creators"></a>Typing connected component using <code>redux-thunk</code> action creators</h3><p><em><strong>NOTE</strong>: When using thunk action creators you need to use <code>bindActionCreators</code>. Only this way you can get corrected dispatch props type signature like below.</em></p><p><em><strong>WARNING</strong>: As of now (Apr 2019) <code>bindActionCreators</code> signature of the latest <code>redux-thunk</code> release will not work as below, you need to use updated type definitions that you can find here <a href="./playground/typings/redux-thunk/index.d.ts"><code>/playground/typings/redux-thunk/index.d.ts</code></a> and then add <code>paths</code> overload in your tsconfig like this: <a href="./playground/tsconfig.json"><code>&quot;paths&quot;:{&quot;redux-thunk&quot;:[&quot;typings/redux-thunk&quot;]}</code></a>.</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const thunkAsyncAction = () =&gt; async (dispatch: Dispatch): Promise&lt;void&gt; =&gt; &#123;</span><br><span class="line">  // dispatch actions, return Promise, etc.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = (dispatch: Dispatch&lt;Types.RootAction&gt;) =&gt;</span><br><span class="line">  bindActionCreators(</span><br><span class="line">    &#123;</span><br><span class="line">      thunkAsyncAction,</span><br><span class="line">    &#125;,</span><br><span class="line">    dispatch</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">type DispatchProps = ReturnType&lt;typeof mapDispatchToProps&gt;;</span><br><span class="line">// &#123; thunkAsyncAction: () =&gt; Promise&lt;void&gt;; &#125;</span><br><span class="line"></span><br><span class="line">/* Without &quot;bindActionCreators&quot; fix signature will be the same as the original &quot;unbound&quot; thunk function: */</span><br><span class="line">// &#123; thunkAsyncAction: () =&gt; (dispatch: Dispatch&lt;AnyAction&gt;) =&gt; Promise&lt;void&gt;; &#125;</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h1 id="Configuration-amp-Dev-Tools"><a href="#Configuration-amp-Dev-Tools" class="headerlink" title="Configuration &amp; Dev Tools"></a>Configuration &amp; Dev Tools</h1><h2 id="Common-Npm-Scripts"><a href="#Common-Npm-Scripts" class="headerlink" title="Common Npm Scripts"></a>Common Npm Scripts</h2><blockquote><p>Common TS-related npm scripts shared across projects<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;prettier&quot;: &quot;prettier --list-different &apos;src/**/*.ts&apos; || (echo &apos;\nPlease fix code formatting by running:\nnpm run prettier:fix\n&apos;; exit 1)&quot;,</span><br><span class="line">&quot;prettier:fix&quot;: &quot;prettier --write &apos;src/**/*.ts&apos;&quot;,</span><br><span class="line">&quot;lint&quot;: &quot;tslint -p ./&quot;,</span><br><span class="line">&quot;tsc&quot;: &quot;tsc -p ./ --noEmit&quot;,</span><br><span class="line">&quot;tsc:watch&quot;: &quot;tsc -p ./ --noEmit -w&quot;,</span><br><span class="line">&quot;test&quot;: &quot;jest --config jest.config.json&quot;,</span><br><span class="line">&quot;test:watch&quot;: &quot;jest --config jest.config.json --watch&quot;,</span><br><span class="line">&quot;test:update&quot;: &quot;jest --config jest.config.json -u&quot;</span><br><span class="line">&quot;ci-check&quot;: &quot;npm run prettier &amp;&amp; npm run lint &amp;&amp; npm run tsc &amp;&amp; npm run test&quot;,</span><br></pre></td></tr></table></figure></p></blockquote><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>We have our own recommended <code>tsconfig.json</code> that you can easily add to your project thanks to <a href="https://github.com/piotrwitek/react-redux-typescript-scripts" target="_blank" rel="noopener"><code>react-redux-typescript-scripts</code></a> package.</p><h4 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h4><details><summary><i>Click to expand</i></summary><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;include&quot;: [</span><br><span class="line">    &quot;src&quot;,</span><br><span class="line">    &quot;typings&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;exclude&quot;: [</span><br><span class="line">    &quot;src/**/*.spec.*&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;extends&quot;: &quot;./node_modules/react-redux-typescript-scripts/tsconfig.json&quot;,</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></p></details><p><a href="#table-of-contents">⇧ back to top</a></p><h2 id="TSLib"><a href="#TSLib" class="headerlink" title="TSLib"></a>TSLib</h2><p><a href="https://www.npmjs.com/package/tslib" target="_blank" rel="noopener">https://www.npmjs.com/package/tslib</a></p><p>This library will cut down on your bundle size, thanks to using external runtime helpers instead of adding them per each file.</p><blockquote><p>Installation<br><code>npm i tslib</code></p></blockquote><p>Then add this to your <code>tsconfig.json</code>:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">  <span class="string">"importHelpers"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="#table-of-contents">⇧ back to top</a></p><h2 id="TSLint"><a href="#TSLint" class="headerlink" title="TSLint"></a>TSLint</h2><p><a href="https://palantir.github.io/tslint/" target="_blank" rel="noopener">https://palantir.github.io/tslint/</a></p><blockquote><p>Installation<br><code>npm i -D tslint</code></p></blockquote><blockquote><p>For React project you should add additional <code>react</code> specific rules: <code>npm i -D tslint-react</code> <a href="https://github.com/palantir/tslint-react" target="_blank" rel="noopener">https://github.com/palantir/tslint-react</a>  </p></blockquote><p>We have our own recommended config that you can easily add to your project thanks to <a href="https://github.com/piotrwitek/react-redux-typescript-scripts" target="_blank" rel="noopener"><code>react-redux-typescript-scripts</code></a> package.</p><h4 id="tslint-json"><a href="#tslint-json" class="headerlink" title="tslint.json"></a>tslint.json</h4><details><summary><i>Click to expand</i></summary><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;react-redux-typescript-scripts/tslint.json&quot;,</span><br><span class="line">    &quot;react-redux-typescript-scripts/tslint-react.json&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    // you can further customize options here</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></p></details><p><a href="#table-of-contents">⇧ back to top</a></p><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p><a href="https://eslint.org/" target="_blank" rel="noopener">https://eslint.org/</a><br><a href="https://typescript-eslint.io" target="_blank" rel="noopener">https://typescript-eslint.io</a></p><blockquote><p>Installation<br><code>npm i -D eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin</code></p></blockquote><p>We have our own recommended config that will automatically add a parser &amp; plugin for TypeScript thanks to <a href="https://github.com/piotrwitek/react-redux-typescript-scripts" target="_blank" rel="noopener"><code>react-redux-typescript-scripts</code></a> package.</p><h4 id="eslintrc"><a href="#eslintrc" class="headerlink" title=".eslintrc"></a>.eslintrc</h4><details><summary><i>Click to expand</i></summary><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;react-app&quot;,</span><br><span class="line">    &quot;./node_modules/react-redux-typescript-scripts/eslint.js&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    // you can further customize options here</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></p></details><p><a href="#table-of-contents">⇧ back to top</a></p><h2 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h2><p><a href="https://jestjs.io/" target="_blank" rel="noopener">https://jestjs.io/</a></p><blockquote><p>Installation<br><code>npm i -D jest ts-jest @types/jest</code></p></blockquote><h4 id="jest-config-json"><a href="#jest-config-json" class="headerlink" title="jest.config.json"></a>jest.config.json</h4><details><summary><i>Click to expand</i></summary><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;verbose&quot;: true,</span><br><span class="line">  &quot;transform&quot;: &#123;</span><br><span class="line">    &quot;.(ts|tsx)&quot;: &quot;ts-jest&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;testRegex&quot;: &quot;(/spec/.*|\\.(test|spec))\\.(ts|tsx|js)$&quot;,</span><br><span class="line">  &quot;moduleFileExtensions&quot;: [&quot;ts&quot;, &quot;tsx&quot;, &quot;js&quot;],</span><br><span class="line">  &quot;moduleNameMapper&quot;: &#123;</span><br><span class="line">    &quot;^Components/(.*)&quot;: &quot;./src/components/$1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;globals&quot;: &#123;</span><br><span class="line">    &quot;window&quot;: &#123;&#125;,</span><br><span class="line">    &quot;ts-jest&quot;: &#123;</span><br><span class="line">      &quot;tsConfig&quot;: &quot;./tsconfig.json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;setupFiles&quot;: [&quot;./jest.stubs.js&quot;],</span><br><span class="line">  &quot;testURL&quot;: &quot;http://localhost/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></p></details><h4 id="jest-stubs-js"><a href="#jest-stubs-js" class="headerlink" title="jest.stubs.js"></a>jest.stubs.js</h4><details><summary><i>Click to expand</i></summary><p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// Global/Window object Stubs for Jest</span><br><span class="line">window.matchMedia = window.matchMedia || function () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    matches: false,</span><br><span class="line">    addListener: function () &#123; &#125;,</span><br><span class="line">    removeListener: function () &#123; &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">window.requestAnimationFrame = function (callback) &#123;</span><br><span class="line">  setTimeout(callback);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">window.localStorage = &#123;</span><br><span class="line">  getItem: function () &#123; &#125;,</span><br><span class="line">  setItem: function () &#123; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.values = () =&gt; [];</span><br></pre></td></tr></table></figure><br><br></p></details><p><a href="#table-of-contents">⇧ back to top</a></p><h2 id="Style-Guide"><a href="#Style-Guide" class="headerlink" title="Style Guide"></a>Style Guide</h2><h3 id="“react-styleguidist”"><a href="#“react-styleguidist”" class="headerlink" title="“react-styleguidist”"></a><a href="https://github.com/styleguidist/react-styleguidist" target="_blank" rel="noopener">“react-styleguidist”</a></h3><p><a href="/playground/styleguide.config.js">⟩⟩⟩ styleguide.config.js</a>  </p><p><a href="https://piotrwitek.github.io/react-redux-typescript-guide/" target="_blank" rel="noopener">⟩⟩⟩ demo</a></p><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h1 id="Recipes"><a href="#Recipes" class="headerlink" title="Recipes"></a>Recipes</h1><h3 id="General-Tips"><a href="#General-Tips" class="headerlink" title="General Tips"></a>General Tips</h3><h4 id="should-I-still-use-React-PropTypes-in-TS"><a href="#should-I-still-use-React-PropTypes-in-TS" class="headerlink" title="- should I still use React.PropTypes in TS?"></a>- should I still use React.PropTypes in TS?</h4><p>No. With TypeScript, using PropTypes is an unnecessary overhead. When declaring Props and State interfaces, you will get complete intellisense and design-time safety with static type checking. This way you’ll be safe from runtime errors and you will save a lot of time on debugging. Additional benefit is an elegant and standardized method of documenting your component public API in the source code.  </p><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="when-to-use-interface-declarations-and-when-type-aliases"><a href="#when-to-use-interface-declarations-and-when-type-aliases" class="headerlink" title="- when to use interface declarations and when type aliases?"></a>- when to use <code>interface</code> declarations and when <code>type</code> aliases?</h4><p>From practical side, using <code>interface</code> declaration will create an identity (interface name) in compiler errors, on the contrary <code>type</code> aliases doesn’t create an identity and will be unwinded to show all the properties and nested types it consists of.<br>Although I prefer to use <code>type</code> most of the time there are some places this can become too noisy when reading compiler errors and that’s why I like to leverage this distinction to hide some of not so important type details in errors using interfaces identity.<br>Related <code>ts-lint</code> rule: <a href="https://palantir.github.io/tslint/rules/interface-over-type-literal/" target="_blank" rel="noopener">https://palantir.github.io/tslint/rules/interface-over-type-literal/</a>  </p><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="what’s-better-default-or-named-exports"><a href="#what’s-better-default-or-named-exports" class="headerlink" title="- what’s better default or named exports?"></a>- what’s better default or named exports?</h4><p>A common flexible solution is to use module folder pattern, because you can leverage both named and default import when you see fit.<br>With this solution you’ll achieve better encapsulation and be able to safely refactor internal naming and folders structure without breaking your consumer code:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. create your component files (`select.tsx`) using default export in some folder:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// components/select.tsx</span></span><br><span class="line"><span class="keyword">const</span> Select: React.FC&lt;Props&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Select;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. in this folder create an `index.ts` file that will re-export components with named exports:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// components/index.ts</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Select &#125; <span class="keyword">from</span> <span class="string">'./select'</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. now you can import your components in both ways, with named export (better encapsulation) or using default export (internal access):</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// containers/container.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; Select &#125; <span class="keyword">from</span> <span class="string">'@src/components'</span>;</span><br><span class="line">or</span><br><span class="line"><span class="keyword">import</span> Select <span class="keyword">from</span> <span class="string">'@src/components/select'</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="how-to-best-initialize-class-instance-or-static-properties"><a href="#how-to-best-initialize-class-instance-or-static-properties" class="headerlink" title="- how to best initialize class instance or static properties?"></a>- how to best initialize class instance or static properties?</h4><p>Prefered modern syntax is to use class Property Initializers<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class ClassCounterWithInitialCount extends React.Component&lt;Props, State&gt; &#123;</span><br><span class="line">  // default props using Property Initializers</span><br><span class="line">  static defaultProps: DefaultProps = &#123;</span><br><span class="line">    className: &apos;default-class&apos;,</span><br><span class="line">    initialCount: 0,</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  // initial state using Property Initializers</span><br><span class="line">  state: State = &#123;</span><br><span class="line">    count: this.props.initialCount,</span><br><span class="line">  &#125;;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="#table-of-contents">⇧ back to top</a></p><h4 id="how-to-best-declare-component-handler-functions"><a href="#how-to-best-declare-component-handler-functions" class="headerlink" title="- how to best declare component handler functions?"></a>- how to best declare component handler functions?</h4><p>Prefered modern syntax is to use Class Fields with arrow functions<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class ClassCounter extends React.Component&lt;Props, State&gt; &#123;</span><br><span class="line">// handlers using Class Fields with arrow functions</span><br><span class="line">  handleIncrement = () =&gt; &#123;</span><br><span class="line">    this.setState(&#123; count: this.state.count + 1 &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Ambient-Modules-Tips"><a href="#Ambient-Modules-Tips" class="headerlink" title="Ambient Modules Tips"></a>Ambient Modules Tips</h3><h4 id="Imports-in-ambient-modules"><a href="#Imports-in-ambient-modules" class="headerlink" title="Imports in ambient modules"></a>Imports in ambient modules</h4><p>For type augmentation imports should stay outside of module declaration.<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Operator &#125; <span class="keyword">from</span> <span class="string">'rxjs/Operator'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'rxjs/Subject' &#123;</span><br><span class="line">  <span class="keyword">interface</span> Subject&lt;T&gt; &#123;</span><br><span class="line">    lift&lt;R&gt;(operator: Operator&lt;T, R&gt;): Observable&lt;R&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>When creating 3rd party type-definitions all the imports should be kept inside the module decleration, otherwise it will be treated as augmentation and show error</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "react-custom-scrollbars" &#123;</span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> positionValues &#123;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Type-Definitions-Tips"><a href="#Type-Definitions-Tips" class="headerlink" title="Type-Definitions Tips"></a>Type-Definitions Tips</h3><h4 id="Missing-type-definitions-error"><a href="#Missing-type-definitions-error" class="headerlink" title="Missing type-definitions error"></a>Missing type-definitions error</h4><p>if you cannot find types for a third-party module you can provide your own types or disable type-checking for this module using <a href="https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Modules.md#shorthand-ambient-modules" target="_blank" rel="noopener">Shorthand Ambient Modules</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// typings/modules.d.ts</span><br><span class="line">declare module &apos;MyTypes&apos;;</span><br><span class="line">declare module &apos;react-test-renderer&apos;;</span><br></pre></td></tr></table></figure><h4 id="Using-custom-d-ts-files-for-npm-modules"><a href="#Using-custom-d-ts-files-for-npm-modules" class="headerlink" title="Using custom d.ts files for npm modules"></a>Using custom <code>d.ts</code> files for npm modules</h4><p>If you want to use an alternative (customized) type-definitions for some npm module (that usually comes with it’s own type-definitions), you can do it by adding an override in <code>paths</code> compiler option.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="string">"paths"</span>: &#123;</span><br><span class="line">      <span class="string">"redux"</span>: [<span class="string">"typings/redux"</span>], <span class="comment">// use an alternative type-definitions instead of the included one</span></span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    ...,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⇧ back to top</a></p><h3 id="Type-Augmentation-Tips"><a href="#Type-Augmentation-Tips" class="headerlink" title="Type Augmentation Tips"></a>Type Augmentation Tips</h3><p>Strategies to fix issues coming from external type-definitions files (*.d.ts)</p><h4 id="Augmenting-library-internal-declarations-using-relative-import"><a href="#Augmenting-library-internal-declarations-using-relative-import" class="headerlink" title="Augmenting library internal declarations - using relative import"></a>Augmenting library internal declarations - using relative import</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// added missing autoFocus Prop on Input component in "antd@2.10.0" npm package</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> '../node_modules/antd/lib/input/Input' &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> InputProps &#123;</span><br><span class="line">    autoFocus?: <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Augmenting-library-public-declarations-using-node-modules-import"><a href="#Augmenting-library-public-declarations-using-node-modules-import" class="headerlink" title="Augmenting library public declarations - using node_modules import"></a>Augmenting library public declarations - using node_modules import</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fixed broken public type-definitions in "rxjs@5.4.1" npm package</span></span><br><span class="line"><span class="keyword">import</span> &#123; Operator &#125; <span class="keyword">from</span> <span class="string">'rxjs/Operator'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> 'rxjs/Subject' &#123;</span><br><span class="line">  <span class="keyword">interface</span> Subject&lt;T&gt; &#123;</span><br><span class="line">    lift&lt;R&gt;(operator: Operator&lt;T, R&gt;): Observable&lt;R&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>More advanced scenarios for working with vendor type-definitions can be found here <a href="https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Modules.md#working-with-other-javascript-libraries" target="_blank" rel="noopener">Official TypeScript Docs</a></p></blockquote><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Tutorials-amp-Articles"><a href="#Tutorials-amp-Articles" class="headerlink" title="Tutorials &amp; Articles"></a>Tutorials &amp; Articles</h2><blockquote><p>Curated list of relevant in-depth tutorials</p></blockquote><p>Higher-Order Components:</p><ul><li><a href="https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb" target="_blank" rel="noopener">https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb</a></li></ul><p><a href="#table-of-contents">⇧ back to top</a></p><hr><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><p>Thanks goes to these wonderful people (<a href="https://github.com/kentcdodds/all-contributors#emoji-key" target="_blank" rel="noopener">emoji key</a>):</p><!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --><!-- prettier-ignore --><table><thead><tr><th style="text-align:center"><a href="https://github.com/piotrwitek" target="_blank" rel="noopener"><img src="https://avatars0.githubusercontent.com/u/739075?v=4" width="100px;"><br><sub><b>Piotrek Witek</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=piotrwitek" title="Code" target="_blank" rel="noopener">💻</a> <a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=piotrwitek" title="Documentation" target="_blank" rel="noopener">📖</a> <a href="#ideas-piotrwitek" title="Ideas, Planning, &amp; Feedback">🤔</a> <a href="#review-piotrwitek" title="Reviewed Pull Requests">👀</a> <a href="#question-piotrwitek" title="Answering Questions">💬</a></th><th style="text-align:center"><a href="https://github.com/kazup01" target="_blank" rel="noopener"><img src="https://avatars3.githubusercontent.com/u/8602615?v=4" width="100px;"><br><sub><b>Kazz Yokomizo</b></sub></a><br><a href="#financial-kazup01" title="Financial">💵</a> <a href="#fundingFinding-kazup01" title="Funding Finding">🔍</a></th><th style="text-align:center"><a href="https://github.com/jakeboone02" target="_blank" rel="noopener"><img src="https://avatars1.githubusercontent.com/u/366438?v=4" width="100px;"><br><sub><b>Jake Boone</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=jakeboone02" title="Documentation" target="_blank" rel="noopener">📖</a></th><th style="text-align:center"><a href="https://github.com/amitdahan" target="_blank" rel="noopener"><img src="https://avatars1.githubusercontent.com/u/9748762?v=4" width="100px;"><br><sub><b>Amit Dahan</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=amitdahan" title="Documentation" target="_blank" rel="noopener">📖</a></th><th style="text-align:center"><a href="https://github.com/gulderov" target="_blank" rel="noopener"><img src="https://avatars1.githubusercontent.com/u/98167?v=4" width="100px;"><br><sub><b>gulderov</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=gulderov" title="Documentation" target="_blank" rel="noopener">📖</a></th><th style="text-align:center"><a href="https://github.com/emp823" target="_blank" rel="noopener"><img src="https://avatars1.githubusercontent.com/u/1964212?v=4" width="100px;"><br><sub><b>Erik Pearson</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=emp823" title="Documentation" target="_blank" rel="noopener">📖</a></th><th style="text-align:center"><a href="https://github.com/flymason" target="_blank" rel="noopener"><img src="https://avatars1.githubusercontent.com/u/5342677?v=4" width="100px;"><br><sub><b>Bryan Mason</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=flymason" title="Documentation" target="_blank" rel="noopener">📖</a></th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://www.jakub.chodorowicz.pl/" target="_blank" rel="noopener"><img src="https://avatars1.githubusercontent.com/u/119451?v=4" width="100px;"><br><sub><b>Jakub Chodorowicz</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=chodorowicz" title="Code" target="_blank" rel="noopener">💻</a></td><td style="text-align:center"><a href="https://github.com/mleg" target="_blank" rel="noopener"><img src="https://avatars1.githubusercontent.com/u/7266431?v=4" width="100px;"><br><sub><b>Oleg Maslov</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/issues?q=author%3Amleg" title="Bug reports" target="_blank" rel="noopener">🐛</a></td><td style="text-align:center"><a href="https://github.com/awestbro" target="_blank" rel="noopener"><img src="https://avatars0.githubusercontent.com/u/3393293?v=4" width="100px;"><br><sub><b>Aaron Westbrook</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/issues?q=author%3Aawestbro" title="Bug reports" target="_blank" rel="noopener">🐛</a></td><td style="text-align:center"><a href="http://www.linkedin.com/in/peterblazejewicz" target="_blank" rel="noopener"><img src="https://avatars3.githubusercontent.com/u/14539?v=4" width="100px;"><br><sub><b>Peter Blazejewicz</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=peterblazejewicz" title="Documentation" target="_blank" rel="noopener">📖</a></td><td style="text-align:center"><a href="https://github.com/rubysolo" target="_blank" rel="noopener"><img src="https://avatars3.githubusercontent.com/u/1642?v=4" width="100px;"><br><sub><b>Solomon White</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=rubysolo" title="Documentation" target="_blank" rel="noopener">📖</a></td><td style="text-align:center"><a href="https://github.com/pino" target="_blank" rel="noopener"><img src="https://avatars2.githubusercontent.com/u/8838006?v=4" width="100px;"><br><sub><b>Levi Rocha</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=pino" title="Documentation" target="_blank" rel="noopener">📖</a></td><td style="text-align:center"><a href="http://cloudnative.co.jp" target="_blank" rel="noopener"><img src="https://avatars1.githubusercontent.com/u/41281835?v=4" width="100px;"><br><sub><b>Sudachi-kun</b></sub></a><br><a href="#financial-loadbalance-sudachi-kun" title="Financial">💵</a></td></tr><tr><td style="text-align:center"><a href="http://sosukesuzuki.github.io" target="_blank" rel="noopener"><img src="https://avatars1.githubusercontent.com/u/14838850?v=4" width="100px;"><br><sub><b>Sosuke Suzuki</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=sosukesuzuki" title="Code" target="_blank" rel="noopener">💻</a></td><td style="text-align:center"><a href="https://github.com/chillitom" target="_blank" rel="noopener"><img src="https://avatars0.githubusercontent.com/u/74433?v=4" width="100px;"><br><sub><b>Tom Rathbone</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=chillitom" title="Documentation" target="_blank" rel="noopener">📖</a></td><td style="text-align:center"><a href="https://arshadkazmi42.github.io/" target="_blank" rel="noopener"><img src="https://avatars3.githubusercontent.com/u/4654382?v=4" width="100px;"><br><sub><b>Arshad Kazmi</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=arshadkazmi42" title="Documentation" target="_blank" rel="noopener">📖</a></td><td style="text-align:center"><a href="https://jeongukjae.github.io" target="_blank" rel="noopener"><img src="https://avatars1.githubusercontent.com/u/8815362?v=4" width="100px;"><br><sub><b>JeongUkJae</b></sub></a><br><a href="https://github.com/piotrwitek/react-redux-typescript-guide/commits?author=JeongUkJae" title="Documentation" target="_blank" rel="noopener">📖</a></td></tr></tbody></table><!-- ALL-CONTRIBUTORS-LIST:END --><p>This project follows the <a href="https://github.com/kentcdodds/all-contributors" target="_blank" rel="noopener">all-contributors</a> specification. Contributions of any kind welcome!</p><hr><p>MIT License</p><p>Copyright (c) 2017 Piotr Witek <a href="mailto:&#112;&#105;&#x6f;&#x74;&#114;&#x65;&#x6b;&#46;&#x77;&#105;&#116;&#x65;&#x6b;&#64;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#112;&#105;&#x6f;&#x74;&#114;&#x65;&#x6b;&#46;&#x77;&#105;&#116;&#x65;&#x6b;&#64;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a> (<a href="http://piotrwitek.github.io" target="_blank" rel="noopener">http://piotrwitek.github.io</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript学习(4) 函数</title>
      <link href="/2019/05/12/learn-ts4/"/>
      <url>/2019/05/12/learn-ts4/</url>
      
        <content type="html"><![CDATA[<h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整函数类型"><a href="#完整函数类型" class="headerlink" title="完整函数类型"></a>完整函数类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">baseValue: <span class="built_in">number</span>, increment: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> =</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ts有类型推断，不需要写的那么完整，上面的例子可以只写左边或右边</p><a id="more"></a><h2 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h2><p>没传参的时候，它的值就是 <code>undefined</code>，可选参数必须跟在必须参数后面</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">baseValue: <span class="built_in">number</span>, increment?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br></pre></td></tr></table></figure><p>默认初始化值的参数：当用户没有传递这个参数或传递的值是 undefined 时，为参数提供一个默认值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName = 'Smith'</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在 JavaScript 里，你可以使用 <code>arguments</code> 来访问所有传入的参数。</p><p>在 TypeScript 里，你可以把所有参数收集到一个变量里：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">' '</span> + restOfName.join(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employeeName = buildName(<span class="string">'Joseph'</span>, <span class="string">'Samuel'</span>, <span class="string">'Lucas'</span>, <span class="string">'MacKinzie'</span>)</span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>TypeScript 能通知你错误地使用了 this 的地方</p><h3 id="this-和箭头函数"><a href="#this-和箭头函数" class="headerlink" title="this 和箭头函数"></a>this 和箭头函数</h3><p>箭头函数能保存函数创建时的 <code>this</code> 值，而不是调用时的值</p><h3 id="this-参数"><a href="#this-参数" class="headerlink" title="this 参数"></a>this 参数</h3><p>可以提供一个显式的 <code>this</code> 参数。 <code>this</code> 参数是个假的参数，它出现在参数列表的最前面：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 确保“this”在此独立函数中不可用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个定义 <code>this</code> 参数的例子</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Card &#123;</span><br><span class="line">  suit: <span class="built_in">string</span></span><br><span class="line">  card: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Deck &#123;</span><br><span class="line">  suits: <span class="built_in">string</span>[]</span><br><span class="line">  cards: <span class="built_in">number</span>[]</span><br><span class="line"></span><br><span class="line">  createCardPicker (<span class="keyword">this</span>: Deck): <span class="function"><span class="params">()</span> =&gt;</span> Card</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deck: Deck = &#123;</span><br><span class="line">  suits: [<span class="string">'hearts'</span>, <span class="string">'spades'</span>, <span class="string">'clubs'</span>, <span class="string">'diamonds'</span>],</span><br><span class="line">  cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> 函数现在显式指定其被调用方必须是 deck 类型</span></span><br><span class="line">  createCardPicker: <span class="function"><span class="keyword">function</span> (<span class="params"><span class="keyword">this</span>: Deck</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>)</span><br><span class="line">      <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>)</span><br><span class="line">      <span class="comment">// console.log(this.a) // Property 'a' does not exist on type 'Deck'</span></span><br><span class="line">      <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker()</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'card: '</span> + pickedCard.card + <span class="string">' of '</span> + pickedCard.suit)</span><br></pre></td></tr></table></figure><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>JavaScript 本身是个动态语言。JavaScript 里函数根据传入不同的参数而返回不同类型的数据的场景是很常见的。<br>方法是为同一个函数提供多个函数类型定义来进行函数重载。 编译器会根据这个列表去处理函数的调用。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">'hearts'</span>, <span class="string">'spades'</span>, <span class="string">'clubs'</span>, <span class="string">'diamonds'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: &#123;suit: <span class="built_in">string</span>; card: <span class="built_in">number</span> &#125;[]</span>): <span class="title">number</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: <span class="built_in">number</span></span>): </span>&#123;<span class="title">suit</span>: <span class="title">string</span></span>; card: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(x)) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length)</span><br><span class="line">    <span class="keyword">return</span> pickedCard</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(x / <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; suit: suits[pickedSuit], card: x % <span class="number">13</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [</span><br><span class="line">  &#123; suit: <span class="string">'diamonds'</span>, card: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; suit: <span class="string">'spades'</span>, card: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; suit: <span class="string">'hearts'</span>, card: <span class="number">4</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[pickCard(myDeck)];</span><br><span class="line"><span class="keyword">let</span> pickedCard2 = pickCard(<span class="number">15</span>)</span><br><span class="line"><span class="keyword">let</span> pickedCard3 = pickCard(<span class="string">'aaa'</span>) <span class="comment">// error 类型“"aaa"”的参数不能赋给类型“number”的参数</span></span><br></pre></td></tr></table></figure><p>重载的 <code>pickCard</code> 函数在调用的时候会进行正确的类型检查</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript学习(3) 类</title>
      <link href="/2019/05/11/learn-ts3/"/>
      <url>/2019/05/11/learn-ts3/</url>
      
        <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  move(distance: <span class="built_in">number</span> = <span class="number">0</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>面向对象模式，基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类</p><a id="more"></a><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  move(distance: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span>m.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Snake <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  move(distance: <span class="built_in">number</span> = <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Slithering...'</span>)</span><br><span class="line">    <span class="keyword">super</span>.move(distance)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Horse <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  move(distance: <span class="built_in">number</span> = <span class="number">45</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Galloping...'</span>)</span><br><span class="line">    <span class="keyword">super</span>.move(distance)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">'Sammy'</span>)</span><br><span class="line"><span class="keyword">let</span> tom: Animal = <span class="keyword">new</span> Horse(<span class="string">'Tommy'</span>)</span><br><span class="line"></span><br><span class="line">sam.move()</span><br><span class="line">tom.move(<span class="number">34</span>)</span><br></pre></td></tr></table></figure><p>派生类包含了一个构造函数，它 必须调用 <code>super()</code>，它会执行基类的构造函数。 而且，在构造函数里访问 this 的属性之前，我们 一定要调用 <code>super()</code>。 这个是 TypeScript 强制执行的一条重要规则。</p><p>这个例子演示了如何在子类里可以重写父类的方法。Snake类和 Horse 类都创建了 move 方法，它们重写了从 Animal 继承来的 move 方法，使得 move 方法根据不同的类而具有不同的功能。注意，即使 tom 被声明为 Animal 类型，但因为它的值是 Horse，调用 <code>tom.move(34)</code> 时，它会调用 Horse 里重写的方法。子类方法里使用super调用父类方法</p><h2 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h2><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>TypeScript 里，成员都默认为 <code>public</code></p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>当成员被标记成 <code>private</code> 时，它就不能在声明它的类的外部访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; </span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">'Cat'</span>).name <span class="comment">// 错误: 'name' 是私有的.</span></span><br></pre></td></tr></table></figure><p>如果其中一个类型里包含一个 <code>private</code> 成员，那么只有当另外一个类型中也存在这样一个 <code>private</code> 成员，并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。 对于 <code>protected</code> 成员也使用这个规则</p><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p><code>protected</code> 修饰符与 <code>private</code> 修饰符的行为很相似，但有一点不同， <code>protected</code> 成员在派生类中仍然可以访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> department: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">    <span class="keyword">this</span>.department = department</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getElevatorPitch() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="keyword">this</span>.department&#125;</span>.`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">'Howard'</span>, <span class="string">'Sales'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(howard.getElevatorPitch())</span><br><span class="line"><span class="built_in">console</span>.log(howard.name) <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>注意，我们不能在 <code>Person</code> 类外使用 <code>name</code>，但是我们仍然可以通过 <code>Employee</code> 类的实例方法访问，因为 <code>Employee</code> 是由 <code>Person</code> 派生而来的。</p><p>构造函数也可以被标记成 <code>protected</code>, 这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Employee 能够继承 Person</span></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> department: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">    <span class="keyword">this</span>.department = department</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> getElevatorPitch() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="keyword">this</span>.department&#125;</span>.`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">'Howard'</span>, <span class="string">'Sales'</span>)</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>) <span class="comment">// 错误: 'Person' 的构造函数是被保护的.</span></span><br></pre></td></tr></table></figure><h2 id="readonly修饰符"><a href="#readonly修饰符" class="headerlink" title="readonly修饰符"></a>readonly修饰符</h2><p>使用 <code>readonly</code> 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  readonly name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">'John'</span>)</span><br><span class="line">john.name = <span class="string">'peter'</span> <span class="comment">// error: Cannot assign to 'name' because it is a read-only property</span></span><br></pre></td></tr></table></figure><h2 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h2><p>在上面的例子中，我们必须在 <code>Person</code> 类里定义一个只读成员 <code>name</code> 和一个参数为 <code>name</code> 的构造函数，并且立刻将 <code>name</code> 的值赋给 <code>this.name</code>，这种情况经常会遇到。 参数属性可以方便地让我们在一个地方定义并初始化一个成员。 下面的例子是对之前 <code>Person</code> 类的修改版，使用了参数属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">readonly name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是把声明和赋值合并至一处，<code>public</code>,<code>private</code>,<code>protected</code> 也是一样的，但是不建议使用，不清晰</p><h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2><p>通过 <code>getters/setters</code> 来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Human &#123;</span><br><span class="line">  <span class="keyword">private</span> _name!: <span class="built_in">string</span>; <span class="comment">// 不加感叹号会报错：属性“_name”没有初始化表达式，且未在构造函数中明确赋值</span></span><br><span class="line">  <span class="keyword">get</span> name(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> name(newName: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = <span class="string">`newName:<span class="subst">$&#123;newName&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> Human();</span><br><span class="line">mike.name = <span class="string">'mike'</span>;</span><br></pre></td></tr></table></figure><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><p>静态属性存在于类本身上面而不是类的实例上</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Human &#123;</span><br><span class="line">  <span class="keyword">static</span> age: <span class="built_in">number</span> = <span class="number">15</span>;</span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Human.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mike = <span class="keyword">new</span> Human();</span><br><span class="line">mike.show();</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。不同于接口，抽象类可以包含成员的实现细节。 <code>abstract</code> 关键字是用于定义抽象类和在抽象类内部定义抽象方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal1 &#123;</span><br><span class="line">  <span class="keyword">abstract</span> makeSound(): <span class="built_in">void</span>;</span><br><span class="line">  move(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'moving'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Bird <span class="keyword">extends</span> Animal1 &#123;</span><br><span class="line">  makeSound() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'jiujiujiu'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bird: Bird = <span class="keyword">new</span> Bird();</span><br><span class="line">bird.makeSound();</span><br><span class="line">bird.move();</span><br></pre></td></tr></table></figure><p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。两者都是定义方法签名但不包含方法体。<br>然而，抽象方法必须包含 <code>abstract</code> 关键字并且可以包含访问修饰符，除 <code>private</code>，因为子类需要实现抽象方法</p><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>当你在 TypeScript 里声明了一个类的时候，实际上同时声明了很多东西。首先就是类的 <strong>实例</strong> 的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  <span class="keyword">static</span> standardGreeting = <span class="string">'Hello, there'</span></span><br><span class="line">  greeting: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.greeting = message</span><br><span class="line">  &#125;</span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + <span class="keyword">this</span>.greeting</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter: Greeter</span><br><span class="line">greeter = <span class="keyword">new</span> Greeter(<span class="string">'world'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(greeter.greet())</span><br></pre></td></tr></table></figure><p>这里，我们写了 <code>let greeter: Greeter</code>，意思是 <code>Greeter</code> 类的实例的类型是 <code>Greeter</code>。 这对于用过其它面向对象语言的程序员来讲已经是老习惯了。</p><p>我们也创建了一个叫做 <strong>构造函数</strong> 的值 。 这个函数会在我们使用 <code>new</code> 创建类实例的时候被调用。 下面我们来看看，上面的代码被编译成JavaScript后是什么样子的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Greeter = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Greeter</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.greeting = message;</span><br><span class="line">  &#125;</span><br><span class="line">  Greeter.prototype.greet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">  &#125;;</span><br><span class="line">  Greeter.standardGreeting = <span class="string">'Hello, there'</span>;</span><br><span class="line">  <span class="keyword">return</span> Greeter;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> greeter;</span><br><span class="line">greeter = <span class="keyword">new</span> Greeter(<span class="string">'world'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(greeter.greet());</span><br></pre></td></tr></table></figure><p>上面的代码里，<code>var Greeter</code> 将被构造函数赋值。 当我们调用 <code>new</code> 并执行了这个函数后，便会得到一个类的实例。这个构造函数也包含了类的所有静态属性。 换个角度说，我们可以认为类具有 <strong>实例部分</strong> 与 <strong>静态部分</strong> 这两个部分。</p><p>让我们稍微改写一下这个例子，看看它们之间的区别：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  <span class="keyword">static</span> standardGreeting = <span class="string">'Hello, there'</span></span><br><span class="line">  </span><br><span class="line">  greeting: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.greeting = message</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.greeting) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'Hello, '</span> + <span class="keyword">this</span>.greeting</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Greeter.standardGreeting</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter: Greeter</span><br><span class="line">greeter = <span class="keyword">new</span> Greeter()</span><br><span class="line"><span class="built_in">console</span>.log(greeter.greet())</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeterMaker: <span class="keyword">typeof</span> Greeter = Greeter</span><br><span class="line">greeterMaker.standardGreeting = <span class="string">'Hey there'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter2: Greeter = <span class="keyword">new</span> greeterMaker()</span><br><span class="line"><span class="built_in">console</span>.log(greeter2.greet())</span><br></pre></td></tr></table></figure><p>这个例子里， <code>greeter1</code> 与之前看到的一样。 我们实例化 Greeter类，并使用这个对象。 与我们之前看到的一样。</p><p>再之后，我们直接使用类。 我们创建了一个叫做 <code>greeterMaker</code> 的变量。这个变量保存了这个类或者说保存了类构造函数。 然后我们使用 <code>typeof Greeter</code>，意思是取 <code>Greeter</code> 类的类型，而不是实例的类型。或者更确切的说，”告诉我 <code>Greeter</code> 标识符的类型”，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在 <code>greeterMaker</code> 上使用 <code>new</code>，创建 <code>Greeter</code> 的实例。</p><h3 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h3><p>如上一节里所讲的，类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Point &#123;</span><br><span class="line">  x: <span class="built_in">number</span></span><br><span class="line">  y: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3d <span class="keyword">extends</span> Point &#123;</span><br><span class="line">  z: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point3d: Point3d = &#123;x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript学习(2) 接口</title>
      <link href="/2019/05/09/learn-ts2/"/>
      <url>/2019/05/09/learn-ts2/</url>
      
        <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查，接口就是对解构的一种描述</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  color: <span class="built_in">string</span>,</span><br><span class="line">  area?: <span class="built_in">number</span> <span class="comment">// 可选</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>在属性名前用 readonly 来指定只读属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">  readonly x: <span class="built_in">number</span></span><br><span class="line">  readonly y: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1: Point = &#123; x: <span class="number">10</span>, y: <span class="number">20</span> &#125;</span><br><span class="line">p1.x = <span class="number">5</span> <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>TypeScript 具有 ReadonlyArray<t> 类型，它与 Array<t> 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改</t></t></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">66</span> <span class="comment">// error!</span></span><br><span class="line"><span class="keyword">let</span> arr1: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr1 = arr <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p>可以看到就算把整个 ReadonlyArray 赋值到一个普通数组也是不可以的。 但是你可以用类型断言重写</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr1 = arr <span class="keyword">as</span> <span class="built_in">number</span>[]</span><br></pre></td></tr></table></figure><h2 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color?: <span class="built_in">string</span></span><br><span class="line">  width?: <span class="built_in">number</span></span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Func &#123;</span><br><span class="line">  (param: <span class="built_in">string</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func: Func</span><br><span class="line">func = <span class="function"><span class="keyword">function</span>(<span class="params">src: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = src.search(<span class="string">'123'</span>);</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h2><p>与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如 <code>a[10]</code> 或 <code>ageMap[&#39;daniel&#39;]</code>。 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。 让我们看一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: StringArray</span><br><span class="line">myArray = [<span class="string">'Bob'</span>, <span class="string">'Fred'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myStr: <span class="built_in">string</span> = myArray[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>上面例子里，我们定义了 <code>StringArray</code> 接口，它具有索引签名。 这个索引签名表示了当用 <code>number</code> 去索引 <code>StringArray</code> 时会得到 <code>string</code> 类型的返回值。</p><p>TypeScript 支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 <code>number</code> 来索引时，JavaScript 会将它转换成<code>string</code> 然后再去索引对象。 也就是说用 <code>100</code>（一个 <code>number</code>）去索引等同于使用<code>&#39;100&#39;</code>（一个 <code>string</code> ）去索引，因此两者需要保持一致。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  breed: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!</span></span><br><span class="line"><span class="keyword">interface</span> NotOkay &#123;</span><br><span class="line">  [x: <span class="built_in">number</span>]: Animal</span><br><span class="line">  [x: <span class="built_in">string</span>]: Dog</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串索引签名能够很好的描述 <code>dictionary</code> 模式，并且它们也会确保所有属性与其返回值类型相匹配。 因为字符串索引声明了 <code>obj.property</code> 和 <code>obj[&#39;property&#39;]</code> 两种形式都可以。 下面的例子里， <code>name</code> 的类型与字符串索引类型不匹配，所以类型检查器给出一个错误提示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> NumberDictionary &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">  length: <span class="built_in">number</span>;    <span class="comment">// 可以，length是number类型</span></span><br><span class="line">  name: <span class="built_in">string</span>       <span class="comment">// 错误，`name`的类型与索引类型返回值的类型不匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，你可以将索引签名设置为只读，这样就防止了给索引赋值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ReadonlyStringArray &#123;</span><br><span class="line">  readonly [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: ReadonlyStringArray = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>];</span><br><span class="line">myArray[<span class="number">2</span>] = <span class="string">'Mallory'</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><h2 id="类实例接口"><a href="#类实例接口" class="headerlink" title="类实例接口"></a>类实例接口</h2><p><code>implements</code> 关键字的含义是“实现”</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span></span><br><span class="line">  setTime(d: <span class="built_in">Date</span>):<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span></span><br><span class="line">  setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentTime = d</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line"> <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  color: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape &#123;</span><br><span class="line">  sideLength: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> square: Square = &#123;</span><br><span class="line">  color: <span class="string">'red'</span>,</span><br><span class="line">  sideLength: <span class="number">10</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一个接口可以继承多个接口，创建出多个接口的合成接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  color: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PenStroke &#123;</span><br><span class="line">  penWidth: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape, PenStroke &#123;</span><br><span class="line">  sideLength: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> square: Square = &#123;</span><br><span class="line">  color: <span class="string">'red'</span>,</span><br><span class="line">  penWidth:<span class="number">20</span>,</span><br><span class="line">  sideLength: <span class="number">10</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h2><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的 <code>private</code> 和 <code>protected</code> 成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现，使用场景不多</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Control &#123;</span><br><span class="line">  <span class="keyword">private</span> state: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SelectableControl <span class="keyword">extends</span> Control &#123;</span><br><span class="line">  select(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> Control <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">  select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TextBox <span class="keyword">extends</span> Control &#123;</span><br><span class="line">  select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error：“ImageC”类型缺少“state”属性。</span></span><br><span class="line"><span class="keyword">class</span> ImageC <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">  select() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子里，<code>SelectableControl</code> 包含了 <code>Control</code> 的所有成员，包括私有成员 <code>state</code>。 因为 <code>state</code> 是私有成员，所以只能够是 <code>Control</code> 的子类们才能实现 <code>SelectableControl</code> 接口。 因为只有 <code>Control</code> 的子类才能够拥有一个声明于<code>Control</code> 的私有成员 <code>state</code>，这对私有成员的兼容性是必需的。</p><p>在 <code>Control</code> 类内部，是允许通过 <code>SelectableControl</code> 的实例来访问私有成员 <code>state</code> 的。 实际上，<code>SelectableControl</code> 接口和拥有 <code>select</code> 方法的 <code>Control</code> 类是一样的。<code>Button</code>和 <code>TextBox</code> 类是 <code>SelectableControl</code> 的子类（因为它们都继承自<code>Control</code> 并有 <code>select</code> 方法），但 <code>ImageC</code> 类并不是这样的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript学习(1) 基础类型</title>
      <link href="/2019/05/09/learn-ts1/"/>
      <url>/2019/05/09/learn-ts1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录自己学习typescript的过程，本节基础内容部分摘抄自慕课网教程，以后复杂部分尽量会用自己的理解来写</p></blockquote><h2 id="typescript的基本类型"><a href="#typescript的基本类型" class="headerlink" title="typescript的基本类型"></a>typescript的基本类型</h2><p>TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数。 这些浮点数的类型是 number。 除了支持十进制和十六进制字面量，TypeScript 还支持 ECMAScript 2015中引入的二进制和八进制字面量。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0x14</span></span><br><span class="line"><span class="keyword">let</span> binaryLiteral: <span class="built_in">number</span> = <span class="number">0b10100</span></span><br><span class="line"><span class="keyword">let</span> octalLiteral: <span class="built_in">number</span> = <span class="number">0o24</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123; name &#125;</span>`</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>两种方式：第一种，可以在元素类型后面接上 <code>[]</code>；第二种，数组泛型，<code>Array&lt;元素类型&gt;</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h2><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code> 和 <code>number</code> 类型的元组。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>] <span class="comment">// OK</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>] <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p>当访问一个已知索引的元素，会得到正确的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x[<span class="number">0</span>].substr(<span class="number">1</span>)) <span class="comment">// OK</span></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">1</span>].substr(<span class="number">1</span>)) <span class="comment">// Error, 'number' 不存在 'substr' 方法</span></span><br></pre></td></tr></table></figure><p>当访问一个越界的元素，会使用联合类型替代：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">3</span>] = <span class="string">'world'</span> <span class="comment">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">5</span>].toString()) <span class="comment">// OK, 'string' 和 'number' 都有 toString</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">6</span>] = <span class="literal">true</span> <span class="comment">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：自从 TyeScript 3.1 版本之后，访问越界元素会报错，我们不应该再使用该特性。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green</span><br></pre></td></tr></table></figure><p>默认情况下，从 <code>0</code> 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 <code>1</code> 开始编号：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green</span><br></pre></td></tr></table></figure><p>或者，全部都采用手动赋值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green = <span class="number">2</span>, Blue = <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green</span><br></pre></td></tr></table></figure><p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为 2，但是不确定它映射到 Color 里的哪个名字，我们可以查找相应的名字：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> colorName: <span class="built_in">string</span> = Color[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colorName)  <span class="comment">// 显示'Green'因为上面代码里它的值是2</span></span><br></pre></td></tr></table></figure><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span></span><br><span class="line">notSure = <span class="string">'maybe a string instead'</span></span><br><span class="line">notSure = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">'free'</span>]</span><br></pre></td></tr></table></figure><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>表示没有任何类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'This is my warning message'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个 <code>void</code> 类型的变量没有什么大用，因为你只能为它赋予 <code>undefined</code> 和 <code>null</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h2 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a>null 和 undefined</h2><p>TypeScript 里，<code>undefined</code> 和 <code>null</code> 两者各自有自己的类型分别叫做 <code>undefined</code> 和 <code>null</code>。 和 <code>void</code> 相似，它们的本身的类型用处不是很大：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。 就是说你可以把 <code>null</code> 和 <code>undefined</code> 赋值给 <code>number</code> 类型的变量。</p><p>然而，当你指定了 <code>--strictNullChecks</code> 标记，<code>null</code> 和 <code>undefined</code> 只能赋值给 <code>void</code> 和它们各自，这能避免 很多常见的问题。 也许在某处你想传入一个 <code>string</code> 或 <code>null</code> 或 <code>undefined</code>，你可以使用联合类型 <code>string | null | undefined</code>。</p><h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><p>表示的是那些永不存在的值的类型。 例如， <code>never</code> 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 <code>never</code> 类型，当它们被永不为真的类型保护所约束时。</p><p><code>never</code> 类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 <code>never</code> 的子类型或可以赋值给<code>never</code> 类型（除了 <code>never</code> 本身之外）。 即使 <code>any</code> 也不可以赋值给 <code>never</code>。</p><p>下面是一些返回 <code>never</code> 类型的函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推断的返回值类型为never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> error(<span class="string">"Something failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p><code>object</code> 表示非原始类型，也就是除 <code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code> 之外的类型。</p><p>使用 <code>object</code> 类型，就可以更好的表示像 <code>Object.create</code> 这样的 <code>API</code>。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o: object | <span class="literal">null</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params">&#123; prop: 0 &#125;</span>) // <span class="title">OK</span></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params"><span class="literal">null</span></span>) // <span class="title">OK</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params">42</span>) // <span class="title">Error</span></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params">'<span class="built_in">string</span>'</span>) // <span class="title">Error</span></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params"><span class="literal">false</span></span>) // <span class="title">Error</span></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params"><span class="literal">undefined</span></span>) // <span class="title">Error</span></span></span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你，程序员，已经进行了必须的检查。</p><p>类型断言有两种形式。 其一是“尖括号”语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">'this is a string'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length</span><br></pre></td></tr></table></figure><p>另一个为 <code>as</code> 语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">'this is a string'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length</span><br></pre></td></tr></table></figure><p>两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在 TypeScript 里使用 JSX 时，只有 <code>as</code> 语法断言是被允许的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多iconfont项目共用方案</title>
      <link href="/2019/05/08/iconfont/"/>
      <url>/2019/05/08/iconfont/</url>
      
        <content type="html"><![CDATA[<blockquote><p>大多数情况下一个项目只需要一个iconfont项目，但是在某些特殊情况下，需要不止一个iconfont项目共同使用，这里提供一个方案：</p></blockquote><h2 id="1-在项目中设置单独的前缀和FontFamily（最重要的一步）"><a href="#1-在项目中设置单独的前缀和FontFamily（最重要的一步）" class="headerlink" title="1. 在项目中设置单独的前缀和FontFamily（最重要的一步）"></a>1. 在项目中设置单独的前缀和FontFamily（最重要的一步）</h2><p><img src="http://img.xiaoz.site/20190508101232.png" alt="img"><br><img src="http://img.xiaoz.site/20190508101248.png" alt="img"></p><a id="more"></a><h2 id="2-按需求在项目中用Unicode-或者-Font-class-的方式引入即可"><a href="#2-按需求在项目中用Unicode-或者-Font-class-的方式引入即可" class="headerlink" title="2. 按需求在项目中用Unicode 或者 Font class 的方式引入即可"></a>2. 按需求在项目中用Unicode 或者 Font class 的方式引入即可</h2><h3 id="1-Unicode方式："><a href="#1-Unicode方式：" class="headerlink" title="(1) Unicode方式："></a>(1) Unicode方式：</h3><p><img src="http://img.xiaoz.site/20190508101258.png" alt="img"></p><p>使用</p><p><img src="http://img.xiaoz.site/20190508101307.png" alt="img"></p><h3 id="2-Font-class-方式："><a href="#2-Font-class-方式：" class="headerlink" title="(2) Font class 方式："></a>(2) Font class 方式：</h3><p><img src="http://img.xiaoz.site/20190508101313.png" alt="img"></p><p>使用</p><p><img src="http://img.xiaoz.site/20190508101322.png" alt="img"></p><h3 id="3-需要多色时使用Js方式："><a href="#3-需要多色时使用Js方式：" class="headerlink" title="(3) 需要多色时使用Js方式："></a>(3) 需要多色时使用Js方式：</h3><p><img src="http://img.xiaoz.site/20190508101329.png" alt="img"></p><p>使用</p><p><img src="http://img.xiaoz.site/20190508101336.png" alt="img"></p><p>效果</p><p><img src="http://img.xiaoz.site/20190508101343.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中总结的问题</title>
      <link href="/2019/04/26/work-tips/"/>
      <url>/2019/04/26/work-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="各种杂项"><a href="#各种杂项" class="headerlink" title="各种杂项"></a>各种杂项</h2><h3 id="meta-怎么写"><a href="#meta-怎么写" class="headerlink" title="meta 怎么写"></a>meta 怎么写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"fragment"</span> <span class="attr">content</span>=<span class="string">"!"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"政府采购网, 政府采购, 招标, 投标"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"政府采购网"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="禁止-a-标签加上-disabled-后还可以点击"><a href="#禁止-a-标签加上-disabled-后还可以点击" class="headerlink" title="禁止 a 标签加上 disabled 后还可以点击"></a>禁止 a 标签加上 disabled 后还可以点击</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="防止在打印时出现链接地址"><a href="#防止在打印时出现链接地址" class="headerlink" title="防止在打印时出现链接地址"></a>防止在打印时出现链接地址</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文字过长显示省略号-除火狐"><a href="#文字过长显示省略号-除火狐" class="headerlink" title="文字过长显示省略号(除火狐)"></a>文字过长显示省略号(除火狐)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">-o-text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">word-break</span>: keep-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防止-ie-自动弹出确认框"><a href="#防止-ie-自动弹出确认框" class="headerlink" title="防止 ie 自动弹出确认框"></a>防止 ie 自动弹出确认框</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.opener = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">''</span>, <span class="string">'_self'</span>, <span class="string">''</span>);</span><br><span class="line"><span class="built_in">window</span>.close();</span><br></pre></td></tr></table></figure><h3 id="点击下载"><a href="#点击下载" class="headerlink" title="点击下载"></a>点击下载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> downloadFile = <span class="function"><span class="keyword">function</span>(<span class="params">fileName, filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> form = $(<span class="string">"&lt;form style='display:none'&gt;&lt;/form&gt;"</span>);</span><br><span class="line">  form.appendTo(<span class="string">'body'</span>);</span><br><span class="line">  form</span><br><span class="line">    .attr(<span class="string">'action'</span>, <span class="string">'$&#123;devhost&#125;/fd0.action?filePath='</span> + filePath + <span class="string">'&amp;fileName='</span> + fileName)</span><br><span class="line">    .attr(<span class="string">'method'</span>, <span class="string">'POST'</span>);</span><br><span class="line">  form.submit();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="遇到资源路径的问题时，使用-base-标签"><a href="#遇到资源路径的问题时，使用-base-标签" class="headerlink" title="遇到资源路径的问题时，使用 base 标签"></a>遇到资源路径的问题时，使用 base 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"/admin-app/"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="delete-是-ie8-的关键字，方法调用时写成这样的形式"><a href="#delete-是-ie8-的关键字，方法调用时写成这样的形式" class="headerlink" title="delete 是 ie8 的关键字，方法调用时写成这样的形式"></a>delete 是 ie8 的关键字，方法调用时写成这样的形式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx[<span class="string">'delete'</span>].xxx();</span><br></pre></td></tr></table></figure><h3 id="解决-ie8-不支持-background-size-cover-图片覆盖"><a href="#解决-ie8-不支持-background-size-cover-图片覆盖" class="headerlink" title="解决 ie8 不支持 background-size:cover; 图片覆盖"></a>解决 ie8 不支持 background-size:cover; 图片覆盖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='*.jpg', sizingMethod='scale');</span><br></pre></td></tr></table></figure><h3 id="解决-ie8-不能访问-https-协议网站"><a href="#解决-ie8-不能访问-https-协议网站" class="headerlink" title="解决 ie8 不能访问 https 协议网站"></a>解决 ie8 不能访问 https 协议网站</h3><ol><li><a href="http://playkid.blog.163.com/blog/static/5628726020141236645361/" target="_blank" rel="noopener">失效了。。。</a></li><li>ssllabs –&gt; 客户端和服务器端加密算法不一致，需要在服务器端进行配置</li></ol><h3 id="ie8-不支持-new-Date-yyyy-mm-dd"><a href="#ie8-不支持-new-Date-yyyy-mm-dd" class="headerlink" title="ie8 不支持 new Date(yyyy-mm-dd)"></a>ie8 不支持 new Date(yyyy-mm-dd)</h3><p><code>new Date(yyyy-mm-dd.replace(/-/g, &#39;/&#39;))</code></p><h3 id="ie8-不支持-Access-Control-Allow-Origin-会导致跨域问题"><a href="#ie8-不支持-Access-Control-Allow-Origin-会导致跨域问题" class="headerlink" title="ie8 不支持 Access-Control-Allow-Origin: * 会导致跨域问题"></a>ie8 不支持 Access-Control-Allow-Origin: * 会导致跨域问题</h3><ol><li>使用 jsonp</li><li>ie8 手动设置允许跨域</li></ol><h3 id="window-open-打开-ajax-返回的链接会被拦截，用以下办法处理"><a href="#window-open-打开-ajax-返回的链接会被拦截，用以下办法处理" class="headerlink" title="window.open 打开 ajax 返回的链接会被拦截，用以下办法处理"></a>window.open 打开 ajax 返回的链接会被拦截，用以下办法处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newTab = <span class="built_in">window</span>.open(<span class="string">'about:blank'</span>);</span><br><span class="line">xxx.get().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//使用replace，新页面不会出现后退，如果用 location.href='xxx'，会有后退</span></span><br><span class="line">  newTab.location.replace(data.content.content);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ie-iframe-透明"><a href="#ie-iframe-透明" class="headerlink" title="ie iframe 透明"></a>ie iframe 透明</h3><p><code>&lt;iframe allowTransparency=&quot;true&quot; /&gt;</code> iframe 里 body 也要设为背景透明</p><h3 id="https-跳转到-http-强制带上-referrer"><a href="#https-跳转到-http-强制带上-referrer" class="headerlink" title="https 跳转到 http 强制带上 referrer"></a>https 跳转到 http 强制带上 referrer</h3><blockquote><p>referrer 属性可返回载入当前文档的文档的 URL <code>&lt;meta content=&quot;always&quot; name=&quot;referrer&quot;&gt;</code></p></blockquote><h3 id="函数注释写法-jsdoc"><a href="#函数注释写法-jsdoc" class="headerlink" title="函数注释写法 jsdoc"></a>函数注释写法 <a href="http://yuri4ever.github.io/jsdoc/" target="_blank" rel="noopener">jsdoc</a></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @func 标识一个函数</span></span><br><span class="line"><span class="comment"> * @desc 详细描述和说明</span></span><br><span class="line"><span class="comment"> * @global 全局标识</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; a - 参数a</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; 返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="按键时转换小写转大写"><a href="#按键时转换小写转大写" class="headerlink" title="按键时转换小写转大写"></a>按键时转换小写转大写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeyup</span>=<span class="string">"this.value = this.value.toUpperCase().trim();"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关于跨域"><a href="#关于跨域" class="headerlink" title="关于跨域"></a>关于跨域</h3><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a><br><a href="https://enable-cors.org/index.html" target="_blank" rel="noopener">Enable CORS</a></p><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"wgs.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">.img_wrap&#123; // 不能加浮动（若增加一个父级元素） width: 400px; height: 300px; display: table-cell;</span><br><span class="line">//主要是这个属性 vertical-align: middle; text-align: center; &#125;</span><br></pre></td></tr></table></figure><h3 id="离开或刷新页面进行提示"><a href="#离开或刷新页面进行提示" class="headerlink" title="离开或刷新页面进行提示"></a>离开或刷新页面进行提示</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测离开页面提醒操作</span></span><br><span class="line"><span class="keyword">var</span> UnloadConfirm = &#123;&#125;;</span><br><span class="line">UnloadConfirm.MSG_UNLOAD = <span class="string">'确定要放弃编辑吗？您离开后数据将不会被保存。'</span>;</span><br><span class="line">UnloadConfirm.set = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="comment">// 兼容ie8 ie8的退出显示这里的数据</span></span><br><span class="line">    e.returnValue = <span class="string">'确定要放弃编辑吗？您离开后数据将不会被保存。'</span>;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">UnloadConfirm.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">UnloadConfirm.set(UnloadConfirm.MSG_UNLOAD);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择离开才会执行</span></span><br><span class="line"><span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span> <span class="title">whenUnload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="UMD-通用模块规范"><a href="#UMD-通用模块规范" class="headerlink" title="UMD: 通用模块规范"></a>UMD: 通用模块规范</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    <span class="comment">// AMD</span></span><br><span class="line">    define([<span class="string">'jquery'</span>], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// Node, CommonJS之类的</span></span><br><span class="line">    <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'jquery'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 浏览器全局变量(root 即 window)</span></span><br><span class="line">    root.returnExports = factory(root.jQuery);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//    方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//    暴露公共方法</span></span><br><span class="line">  <span class="keyword">return</span> myFunc;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="电话号码中间四位变"><a href="#电话号码中间四位变" class="headerlink" title="电话号码中间四位变 *"></a>电话号码中间四位变 *</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hideMobileMid</span>(<span class="params">mobile</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)$/</span>;</span><br><span class="line">  <span class="keyword">return</span> mobile.replace(reg, <span class="string">'$1****$2'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防止-body-滚动，且-body-带有滚动条"><a href="#防止-body-滚动，且-body-带有滚动条" class="headerlink" title="防止 body 滚动，且 body 带有滚动条"></a>防止 body 滚动，且 body 带有滚动条</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 为body添加样式 */</span></span><br><span class="line"><span class="selector-class">.fixed-body-hook</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 或 */</span></span><br><span class="line"><span class="selector-class">.fixed-body-hook</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="comment">/* position: relative; */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 17px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开弹窗时，阻止body滚动</span></span><br><span class="line">top = $(<span class="built_in">document</span>).scrollTop(); <span class="comment">// 获取当前滚动偏移量</span></span><br><span class="line">$body.css(<span class="string">'top'</span>, <span class="number">-1</span> * top); <span class="comment">// 为body设置top</span></span><br><span class="line">$body.addClass(<span class="string">'fixed-body-hook'</span>); <span class="comment">// 为body增加fixed样式</span></span><br><span class="line"><span class="comment">// 还原body滚动</span></span><br><span class="line">$body.removeClass(<span class="string">'fixed-body-hook'</span>);</span><br><span class="line">$body.css(<span class="string">'top'</span>, <span class="string">''</span>);</span><br><span class="line">$(<span class="built_in">document</span>).scrollTop(top);</span><br></pre></td></tr></table></figure><h3 id="最新手机正则"><a href="#最新手机正则" class="headerlink" title="最新手机正则"></a>最新手机正则</h3><p><a href="https://github.com/VincentSit/ChinaMobilePhoneNumberRegex" target="_blank" rel="noopener">ChinaMobilePhoneNumberRegex</a></p><h3 id="获取图片原始大小"><a href="#获取图片原始大小" class="headerlink" title="获取图片原始大小"></a>获取图片原始大小</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNaturalSize</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> natureSize = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (element.naturalWidth &amp;&amp; element.naturalHeight) &#123;</span><br><span class="line">    natureSize.width = element.naturalWidth;</span><br><span class="line">    natureSize.height = element.naturalHeight;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.src = element.src;</span><br><span class="line">    natureSize.width = img.width;</span><br><span class="line">    natureSize.height = img.height;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> natureSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取-iframe-高度"><a href="#获取-iframe-高度" class="headerlink" title="获取 iframe 高度"></a>获取 iframe 高度</h3><p><code>ele.contentWindow.document.documentElement.scrollHeight</code></p><h3 id="千分位"><a href="#千分位" class="headerlink" title="千分位"></a>千分位</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">'1234564'</span>).toLocaleString();</span><br><span class="line">vartoThousands = <span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (number + <span class="string">''</span>).replace(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">'$1,'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="防止默认填充密码"><a href="#防止默认填充密码" class="headerlink" title="防止默认填充密码"></a>防止默认填充密码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 隐藏的input, 为了禁用浏览器的用户名密码表单自动填充 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">style</span>=<span class="string">"height: 0;padding: 0;width: 0;border: 0;position: absolute;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- password上加属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">autocomplete</span>=<span class="string">"new-password"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">第一步:</span><br><span class="line">打开: https://myssl.com/create_test_cert.html</span><br><span class="line"></span><br><span class="line">第二步:</span><br><span class="line">填写参数:</span><br><span class="line">证书类型: 服务器证书</span><br><span class="line">加密算法: RSA</span><br><span class="line">域名: gmsoft.com (这个不重要, chrome58 以后不会使用它来验证域名了)</span><br><span class="line"></span><br><span class="line">高级设置:</span><br><span class="line">备用名称: 填写要注册的域名(最后列出了目前注册的, 可以在此基础上增加 更新证书)</span><br><span class="line"></span><br><span class="line">密钥强度: 2048</span><br><span class="line">签名哈希算法: SHA256</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">目前证书注册的域名, 如有需要请增加并重新生成证书:</span><br><span class="line">*.gmsoft.com,*.cqzcjdev.com,*.cqzcjshow.com,*.cqzcjtest.com,*.cqzcjtestoper.com,*.gpwdevcom,*.gpwtest.com,*.gpwshow.com,*.gpwtestoper.com,*.culturedev.com,*.culturetest.com,*.culturetestoper.com,*.cultureshow.com,*.wlwculture.com,*.csmhtest.com,*.lgmhtest.com,*.yzmhtest.com,*.dgmhtest.com.conf</span><br></pre></td></tr></table></figure><h3 id="根据-id-从树结构中取对应节点，利用-throw-跳出递归"><a href="#根据-id-从树结构中取对应节点，利用-throw-跳出递归" class="headerlink" title="根据 id 从树结构中取对应节点，利用 throw 跳出递归"></a>根据 id 从树结构中取对应节点，利用 throw 跳出递归</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getNodeById = <span class="function">(<span class="params">id, menus</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 定义变量保存当前结果路径</span></span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getNode</span>(<span class="params">nodes</span>) </span>&#123;</span><br><span class="line">    forEach(nodes, item =&gt; &#123;</span><br><span class="line">      <span class="comment">// 找到符合条件的节点，通过throw终止掉递归</span></span><br><span class="line">      <span class="keyword">if</span> (item.key === id) &#123;</span><br><span class="line">        result = item;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'GOT IT!'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (item.children &amp;&amp; item.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        getNode(item.children);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    getNode(menus);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="angular1-x"><a href="#angular1-x" class="headerlink" title="angular1.x"></a>angular1.x</h2><h3 id="用-last-控制最后一个元素的-class"><a href="#用-last-控制最后一个元素的-class" class="headerlink" title="用\$last 控制最后一个元素的 class"></a>用\$last 控制最后一个元素的 class</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"rule in rules | orderBy:\'-date\'"</span> <span class="attr">class</span>=<span class="string">"ellipsis"</span>' '<span class="attr">ng-class</span>=<span class="string">"&#123;\'last\':$last&#125;"</span></span></span><br><span class="line"><span class="tag"><span class="attr">ui-sref</span>=<span class="string">"rules.detail(&#123;id: rule.id&#125;)"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定-html"><a href="#绑定-html" class="headerlink" title="绑定 html"></a>绑定 html</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.filter(<span class="string">'to_trusted'</span>, [<span class="string">'$sce'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$sce</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $sce.trustAsHtml(text);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;]);</span><br><span class="line">html code:</span><br><span class="line">&lt;p ng-bind-html=<span class="string">"currentWork.description | to_trusted"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="angular-的-JSON-字符串转对象"><a href="#angular-的-JSON-字符串转对象" class="headerlink" title="angular 的 JSON 字符串转对象"></a>angular 的 JSON 字符串转对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.str = angular.fromJson(s.jsonStr);</span><br><span class="line">s.json = angular.toJson(s.obj);</span><br></pre></td></tr></table></figure><h3 id="用-angular-省略号："><a href="#用-angular-省略号：" class="headerlink" title="用 angular 省略号："></a>用 angular 省略号：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">ng-if</span>=<span class="string">"!item.expand"</span> <span class="attr">style</span>=<span class="string">"word-break: break-all;font-weight: normal"</span>&gt;</span></span><br><span class="line">  &#123;&#123;item.content | limitTo:120&#125;&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-if</span>=<span class="string">"item.content.length&gt;120"</span>&gt;</span>....<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-</span> <span class="attr">if</span>=<span class="string">"item.content.length&gt;120"</span> <span class="attr">ng-click</span>=<span class="string">"item.expand=true"</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">ng-if</span>=<span class="string">"item.expand"</span> <span class="attr">style</span>=<span class="string">"word-break: break-all;font-weight: normal"</span></span></span><br><span class="line"><span class="tag">  &gt;</span>&#123;&#123;item.content &#125;&#125;<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"item.expand=false"</span>&gt;</span>收起<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ng-option-的使用，可以绑定-ng-model-的值为-as-前面的属性的值"><a href="#ng-option-的使用，可以绑定-ng-model-的值为-as-前面的属性的值" class="headerlink" title="ng-option 的使用，可以绑定 ng-model 的值为 as 前面的属性的值"></a>ng-option 的使用，可以绑定 ng-model 的值为 as 前面的属性的值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ng-model</span>=<span class="string">"marketId"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ng-options</span>=<span class="string">"a.id as a.adminAreaName for a in areas"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里有一个坑，如果要初始化选中项，ng-model 必须是 String 类型</p></blockquote><h3 id="为异步加载的元素绑定事件-放在-timeout-里"><a href="#为异步加载的元素绑定事件-放在-timeout-里" class="headerlink" title="为异步加载的元素绑定事件,放在 \$timeout 里"></a>为异步加载的元素绑定事件,放在 \$timeout 里</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> width;</span><br><span class="line">  $(<span class="string">'.ellipsis'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    width = $(<span class="keyword">this</span>)</span><br><span class="line">      .css(<span class="string">'width'</span>)</span><br><span class="line">      .slice(<span class="number">0</span>, <span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="keyword">this</span>)[<span class="number">0</span>].scrollWidth &gt; width) $(<span class="keyword">this</span>).tipsy(&#123; <span class="attr">fade</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="keyword">this</span>).removeAttr(<span class="string">'title'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="keyword">this</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="string">'.tipsy'</span>).remove();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ng-if-的坑"><a href="#ng-if-的坑" class="headerlink" title="ng-if 的坑"></a>ng-if 的坑</h3><blockquote><p>ng-show 和 ng-hide 是不自带作用域的，而 ng-if 则自己创建了一级作用域。在用的时候，两者就是有差别的，比如说内部元素访问外层定义的变量，就需要使用\$parent 语法了。</p></blockquote><h3 id="angular-自定义验证"><a href="#angular-自定义验证" class="headerlink" title="angular 自定义验证"></a>angular 自定义验证</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 验证方法 = <span class="function"><span class="keyword">function</span>(<span class="params">输入</span>)</span>&#123;</span><br><span class="line">        ... <span class="comment">//对输入验证</span></span><br><span class="line">        s.editform.provider.$setValidity(<span class="string">'has'</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    s.editform.provider.$parsers.push(验证方法);</span><br><span class="line">    s.editform.provider.$formatters.push(验证方法);</span><br></pre></td></tr></table></figure><h3 id="angular-阻止事件冒泡"><a href="#angular-阻止事件冒泡" class="headerlink" title="angular 阻止事件冒泡"></a>angular 阻止事件冒泡</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-click=<span class="string">"doSomething($event)"</span> /&gt;;</span><br><span class="line">s.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="angular-自定义指令函数传参"><a href="#angular-自定义指令函数传参" class="headerlink" title="angular 自定义指令函数传参"></a>angular 自定义指令函数传参</h3><p><a href="http://blog.csdn.net/inuyasha1121/article/details/71249156" target="_blank" rel="noopener">angular 自定义指令作用域&amp;–传递引用</a></p><h3 id="angular-自定义指令-scope-里不能用-name，和-form-验证有冲突"><a href="#angular-自定义指令-scope-里不能用-name，和-form-验证有冲突" class="headerlink" title="angular 自定义指令 scope 里不能用 name，和 form 验证有冲突"></a>angular 自定义指令 scope 里不能用 name，和 form 验证有冲突</h3><h3 id="angular-的几种-watch"><a href="#angular-的几种-watch" class="headerlink" title="angular 的几种 watch"></a>angular 的几种 watch</h3><ol><li>$watchGroup 的第一个参数要传数组，$watchCollection 的第一个参数要传对象</li><li>监视对象和数组而且监视层次不是特别深，优先使用$watchCollection, $watchCollection 可以方便的监视数组的插入，移除。</li><li>要同时监视多个变量并执行同一逻辑使用\$watchGroup</li><li>除此一般情况下使用\$watch,如果你知道数据结构的深度，可以直接这样监视。 当第三个参数 true，表示深度监测，如果 watch 的变量比较复杂，效率会变低。</li></ol><h2 id="好用的-npm-包"><a href="#好用的-npm-包" class="headerlink" title="好用的 npm 包"></a>好用的 npm 包</h2><ul><li>nodemon 自动重新启动服务器</li><li>rimraf 删除文件</li><li>cross-env 跨平台地设置及使用环境变量</li><li>concurrently 同时启用多个持久服务</li><li>fkill 跨平台杀掉进程</li><li>install-peerdeps 同时安装包的依赖</li><li>husky 在 commit 之前执行其他操作，如 lint</li><li>react-helmet 为 react 项目设置头部</li><li>npx 从本地 node_modules/.bin 中执行命令</li><li>emma-cli 搜索方式安装包</li></ul><p>持续更新中…</p>]]></content>
      
      
      <categories>
          
          <category> work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
